name: üåê Multilingual CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

env:
  NODE_VERSION: '18.x'
  DATABASE_URL: postgresql://video_ia_user:video123@localhost:5432/video_ia_net_test?schema=public
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  BASE_URL: http://localhost:3000
  SUPPORTED_LANGUAGES: en,fr,es,it,de,nl,pt

jobs:
  # =============================================================================
  # PHASE 1: VALIDATION & SETUP
  # =============================================================================
  
  detect-changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      database: ${{ steps.changes.outputs.database }}
      translations: ${{ steps.changes.outputs.translations }}
      tests: ${{ steps.changes.outputs.tests }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'src/components/**'
              - 'src/app/**'
              - 'src/lib/ui/**'
              - 'public/**'
              - '*.config.js'
              - 'package.json'
            backend:
              - 'src/lib/database/**'
              - 'src/lib/services/**'
              - 'src/lib/cache/**'
              - 'src/api/**'
            database:
              - 'prisma/**'
              - 'scripts/multilingual-migration/**'
              - 'src/lib/database/schema.ts'
            translations:
              - 'src/lib/translations/**'
              - 'src/lib/i18n/**'
              - 'locales/**'
            tests:
              - 'tests/**'
              - '**/*.test.ts'
              - '**/*.spec.ts'
            infrastructure:
              - '.github/workflows/**'
              - 'Dockerfile'
              - 'docker-compose.yml'

  setup-matrix:
    name: üèóÔ∏è Setup Test Matrix
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      languages: ${{ steps.matrix.outputs.languages }}
      test-suites: ${{ steps.matrix.outputs.test-suites }}
    steps:
      - id: matrix
        run: |
          # Configuration dynamique bas√©e sur les changements
          if [[ "${{ needs.detect-changes.outputs.translations }}" == "true" ]]; then
            echo "languages=[\"en\",\"fr\",\"es\",\"it\",\"de\",\"nl\",\"pt\"]" >> $GITHUB_OUTPUT
          else
            echo "languages=[\"en\",\"fr\",\"es\",\"de\"]" >> $GITHUB_OUTPUT
          fi
          
          SUITES=[]
          [[ "${{ needs.detect-changes.outputs.frontend }}" == "true" ]] && SUITES+=(\"unit\" \"e2e\" \"visual\")
          [[ "${{ needs.detect-changes.outputs.backend }}" == "true" ]] && SUITES+=(\"integration\" \"performance\")
          [[ "${{ needs.detect-changes.outputs.translations }}" == "true" ]] && SUITES+=(\"multilingual\" \"accessibility\")
          [[ "${{ needs.detect-changes.outputs.database }}" == "true" ]] && SUITES+=(\"database\")
          
          # Fallback si aucun changement sp√©cifique
          [[ ${#SUITES[@]} -eq 0 ]] && SUITES=(\"unit\" \"integration\")
          
          echo "test-suites=$(printf '%s\n' "${SUITES[@]}" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

  # =============================================================================
  # PHASE 2: BUILD & VALIDATION
  # =============================================================================

  lint-and-type-check:
    name: üîß Lint & Type Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.backend == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: |
          npm run lint
          npm run lint:translations # Custom script pour v√©rifier les traductions

      - name: Type check
        run: npm run type-check

      - name: Check translation completeness
        run: |
          node scripts/check-translations.js --languages="${{ env.SUPPORTED_LANGUAGES }}"

  validate-database:
    name: üóÑÔ∏è Validate Database
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.database == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: video_ia_user
          POSTGRES_PASSWORD: video123
          POSTGRES_DB: video_ia_net_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: |
          npx prisma db push
          PGPASSWORD=video123 psql -h localhost -U video_ia_user -d video_ia_net_test -f scripts/multilingual-migration/01-create-multilingual-schema.sql

      - name: Validate schema
        run: |
          npx prisma validate
          npx prisma format --check

      - name: Test migration integrity
        run: npm run test:database

  # =============================================================================
  # PHASE 3: MULTILINGUAL TESTING
  # =============================================================================

  multilingual-unit-tests:
    name: üß™ Multilingual Unit Tests
    runs-on: ubuntu-latest
    needs: [setup-matrix, validate-database]
    if: contains(needs.setup-matrix.outputs.test-suites, 'unit') || contains(needs.setup-matrix.outputs.test-suites, 'multilingual')
    
    strategy:
      matrix:
        language: ${{ fromJson(needs.setup-matrix.outputs.languages) }}
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: video_ia_user
          POSTGRES_PASSWORD: video123
          POSTGRES_DB: video_ia_net_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database for ${{ matrix.language }}
        run: |
          npx prisma db push
          npm run db:setup:test -- --language=${{ matrix.language }}

      - name: Run unit tests for ${{ matrix.language }}
        run: |
          npm run test:unit -- --testNamePattern="${{ matrix.language }}" --maxWorkers=2
        env:
          TEST_LANGUAGE: ${{ matrix.language }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.language }}
          path: |
            coverage/
            test-results/
          retention-days: 30

  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [setup-matrix, lint-and-type-check]
    if: contains(needs.setup-matrix.outputs.test-suites, 'integration')

    strategy:
      matrix:
        language: ${{ fromJson(needs.setup-matrix.outputs.languages) }}
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: video_ia_user
          POSTGRES_PASSWORD: video123
          POSTGRES_DB: video_ia_net_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          npx prisma db push
          npm run db:seed:test -- --language=${{ matrix.language }}

      - name: Run integration tests
        run: |
          npm run test:integration -- --language=${{ matrix.language }}
        env:
          TEST_LANGUAGE: ${{ matrix.language }}
          REDIS_URL: redis://localhost:6379

      - name: Test API endpoints for ${{ matrix.language }}
        run: |
          npm run test:api -- --language=${{ matrix.language }}

  # =============================================================================
  # PHASE 4: E2E & PERFORMANCE TESTING
  # =============================================================================

  build-application:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          npm run build
        env:
          SUPPORTED_LANGUAGES: ${{ env.SUPPORTED_LANGUAGES }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 1

  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: [setup-matrix, build-application]
    if: contains(needs.setup-matrix.outputs.test-suites, 'e2e')
    
    strategy:
      matrix:
        language: ${{ fromJson(needs.setup-matrix.outputs.languages) }}
        browser: [chromium, firefox]
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: video_ia_user
          POSTGRES_PASSWORD: video123
          POSTGRES_DB: video_ia_net_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup database
        run: |
          npx prisma db push
          npm run db:seed:test

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests for ${{ matrix.language }}
        run: |
          npx playwright test --project=${{ matrix.browser }} tests/e2e/multilingual.spec.ts
        env:
          TEST_LANGUAGE: ${{ matrix.language }}
          BASE_URL: http://localhost:3000

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.language }}-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: [setup-matrix, build-application]
    if: contains(needs.setup-matrix.outputs.test-suites, 'performance')
    
    strategy:
      matrix:
        language: ${{ fromJson(needs.setup-matrix.outputs.languages) }}
        device: [desktop, mobile]
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: video_ia_user
          POSTGRES_PASSWORD: video123
          POSTGRES_DB: video_ia_net_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Setup database
        run: |
          npx prisma db push
          npm run db:seed:test

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run performance tests
        run: |
          npx playwright test tests/performance/language-performance.spec.ts
        env:
          TEST_LANGUAGE: ${{ matrix.language }}
          TEST_DEVICE: ${{ matrix.device }}
          BASE_URL: http://localhost:3000

      - name: Generate performance report
        run: |
          node scripts/performance-report.js \
            --language=${{ matrix.language }} \
            --device=${{ matrix.device }} \
            --output=performance-report-${{ matrix.language }}-${{ matrix.device }}.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ matrix.language }}-${{ matrix.device }}
          path: |
            performance-report-*.json
            test-results/
          retention-days: 30

  # =============================================================================
  # PHASE 5: ACCESSIBILITY & VISUAL TESTING
  # =============================================================================

  accessibility-tests:
    name: ‚ôø Accessibility Tests
    runs-on: ubuntu-latest
    needs: [setup-matrix, build-application]
    if: contains(needs.setup-matrix.outputs.test-suites, 'accessibility')
    
    strategy:
      matrix:
        language: ${{ fromJson(needs.setup-matrix.outputs.languages) }}
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: video_ia_user
          POSTGRES_PASSWORD: video123
          POSTGRES_DB: video_ia_net_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright with axe
        run: |
          npx playwright install --with-deps chromium
          npm install @axe-core/playwright

      - name: Setup database
        run: |
          npx prisma db push
          npm run db:seed:test

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run accessibility tests
        run: |
          npx playwright test tests/accessibility/wcag-multilingual.spec.ts
        env:
          TEST_LANGUAGE: ${{ matrix.language }}
          BASE_URL: http://localhost:3000

      - name: Generate accessibility report
        run: |
          node scripts/accessibility-report.js \
            --language=${{ matrix.language }} \
            --standard=WCAG21AA \
            --output=accessibility-report-${{ matrix.language }}.json

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results-${{ matrix.language }}
          path: |
            accessibility-report-*.json
            test-results/
          retention-days: 30

  visual-regression-tests:
    name: üëÅÔ∏è Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [setup-matrix, build-application]
    if: contains(needs.setup-matrix.outputs.test-suites, 'visual')
    
    strategy:
      matrix:
        language: ${{ fromJson(needs.setup-matrix.outputs.languages) }}
        device: [desktop, tablet, mobile]
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: video_ia_user
          POSTGRES_PASSWORD: video123
          POSTGRES_DB: video_ia_net_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Setup database
        run: |
          npx prisma db push
          npm run db:seed:test

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run visual regression tests
        run: |
          npx playwright test tests/visual/multilingual-visual.spec.ts --update-snapshots
        env:
          TEST_LANGUAGE: ${{ matrix.language }}
          TEST_DEVICE: ${{ matrix.device }}
          BASE_URL: http://localhost:3000

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-results-${{ matrix.language }}-${{ matrix.device }}
          path: |
            test-results/
            visual-regression/
          retention-days: 30

  # =============================================================================
  # PHASE 6: REPORTING & ANALYSIS
  # =============================================================================

  aggregate-test-results:
    name: üìä Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [
      multilingual-unit-tests,
      integration-tests,
      e2e-tests,
      performance-tests,
      accessibility-tests,
      visual-regression-tests
    ]
    if: always()

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts/

      - name: Generate comprehensive report
        run: |
          node scripts/generate-ci-report.js \
            --input=test-artifacts/ \
            --output=multilingual-test-report.json \
            --languages="${{ env.SUPPORTED_LANGUAGES }}"

      - name: Generate badges and metrics
        run: |
          node scripts/generate-badges.js \
            --report=multilingual-test-report.json \
            --output=badges/

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v3
        with:
          name: multilingual-test-report
          path: |
            multilingual-test-report.json
            badges/
          retention-days: 90

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('multilingual-test-report.json', 'utf8'));
            
            const comment = `
            ## üåê Multilingual Test Results
            
            | Language | Unit Tests | Integration | E2E | Performance | Accessibility | Visual |
            |----------|------------|-------------|-----|-------------|---------------|--------|
            ${report.languages.map(lang => 
              `| ${lang.code.toUpperCase()} | ${lang.scores.unit}% | ${lang.scores.integration}% | ${lang.scores.e2e}% | ${lang.scores.performance}/100 | ${lang.scores.accessibility}% | ${lang.scores.visual}/100 |`
            ).join('\n')}
            
            **Overall Score:** ${report.overall.score}%
            **Issues Found:** ${report.overall.issues} critical, ${report.overall.warnings} warnings
            
            ${report.overall.score >= 90 ? '‚úÖ Excellent multilingual quality!' : 
              report.overall.score >= 80 ? '‚ö†Ô∏è Good quality with minor issues' : 
              '‚ùå Quality issues detected - review required'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # =============================================================================
  # PHASE 7: DEPLOYMENT
  # =============================================================================

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: aggregate-test-results
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # npm run deploy:staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          DEPLOY_TOKEN: ${{ secrets.STAGING_DEPLOY_TOKEN }}

      - name: Run smoke tests on staging
        run: |
          npm run test:smoke -- --url=${{ secrets.STAGING_URL }}

  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: aggregate-test-results
    if: github.ref == 'refs/heads/main' && success()
    environment: production

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download test report
        uses: actions/download-artifact@v3
        with:
          name: multilingual-test-report

      - name: Validate production readiness
        run: |
          node scripts/validate-production-readiness.js \
            --report=multilingual-test-report.json \
            --min-score=85

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # npm run deploy:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          DEPLOY_TOKEN: ${{ secrets.PRODUCTION_DEPLOY_TOKEN }}

      - name: Run post-deployment verification
        run: |
          npm run test:smoke -- --url=${{ secrets.PRODUCTION_URL }}
          npm run test:monitoring -- --url=${{ secrets.PRODUCTION_URL }}

  # =============================================================================
  # PHASE 8: MONITORING & NOTIFICATIONS
  # =============================================================================

  setup-monitoring:
    name: üìà Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup monitoring dashboards
        run: |
          node scripts/setup-monitoring.js \
            --languages="${{ env.SUPPORTED_LANGUAGES }}" \
            --environment=production

      - name: Create alerts
        run: |
          node scripts/create-alerts.js \
            --languages="${{ env.SUPPORTED_LANGUAGES }}" \
            --thresholds=performance:2s,accessibility:80,errors:1%

  notify-team:
    name: üì¢ Notify Team
    runs-on: ubuntu-latest
    needs: [aggregate-test-results]
    if: always()

    steps:
      - name: Download test report
        uses: actions/download-artifact@v3
        with:
          name: multilingual-test-report

      - name: Notify Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#multilingual-ci'
          text: |
            üö® Multilingual CI/CD Pipeline Failed
            
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            
            Please check the multilingual test results and fix any issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#multilingual-ci'
          text: |
            ‚úÖ Multilingual CI/CD Pipeline Completed Successfully
            
            Branch: ${{ github.ref }}
            All 7 languages tested and validated!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}