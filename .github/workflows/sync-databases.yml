name: 🔄 Database Synchronization

on:
  workflow_dispatch:
    inputs:
      sync_direction:
        description: 'Direction de synchronisation'
        required: true
        default: 'dev-to-prod'
        type: choice
        options:
        - dev-to-prod
        - prod-to-dev
        - bidirectional
      sync_mode:
        description: 'Mode de synchronisation'
        required: true
        default: 'content-only'
        type: choice
        options:
        - full
        - content-only
        - tools-only
        - categories-only
        - translations-only
        - analytics-only
      dry_run:
        description: 'Dry run (preview only)'
        required: false
        default: true
        type: boolean
      preserve_analytics:
        description: 'Preserve production analytics'
        required: false
        default: true
        type: boolean
      create_backup:
        description: 'Create backup before sync'
        required: false
        default: true
        type: boolean

  schedule:
    # Daily sync at 02:00 UTC
    - cron: '0 2 * * *'

jobs:
  sync-dev-to-prod:
    if: github.event.inputs.sync_direction == 'dev-to-prod' || github.event.inputs.sync_direction == 'bidirectional'
    runs-on: ubuntu-latest
    name: 🔄 Sync DEV → PROD
    
    steps:
    - name: 📋 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📊 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: 🔧 Install Dependencies
      run: npm ci
      
    - name: 🔐 Setup Database Connections
      env:
        DEV_DB_PASSWORD: video123
        PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      run: |
        echo "Testing database connections..."
        
        # Test DEV connection
        PGPASSWORD=$DEV_DB_PASSWORD psql -h localhost -U video_ia_user -d video_ia_net -c "SELECT 'DEV Connected', COUNT(*) FROM tools;" || echo "DEV connection failed"
        
        # Test PROD connection (if accessible)
        echo "PROD connection test would be performed here"
        
    - name: 📦 Create Backup
      if: github.event.inputs.create_backup != 'false'
      env:
        PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      run: |
        echo "📦 Creating production backup..."
        mkdir -p backups/automated
        
        BACKUP_FILE="backups/automated/prod_backup_$(date +%Y%m%d_%H%M%S).sql"
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "[DRY RUN] Backup would be created: $BACKUP_FILE"
        else
          echo "Creating backup: $BACKUP_FILE"
          # PGPASSWORD=$PROD_DB_PASSWORD pg_dump -h 46.202.129.104 -U video_ia_user -d video_ia_net -f "$BACKUP_FILE"
          echo "Backup command prepared"
        fi
        
    - name: 🔄 Execute Sync DEV → PROD
      env:
        DEV_DB_HOST: localhost
        DEV_DB_PASSWORD: video123
        PROD_DB_HOST: 46.202.129.104
        PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      run: |
        echo "🔄 Starting DEV → PROD synchronization..."
        echo "Mode: ${{ github.event.inputs.sync_mode }}"
        echo "Dry run: ${{ github.event.inputs.dry_run }}"
        echo "Preserve analytics: ${{ github.event.inputs.preserve_analytics }}"
        
        SYNC_ARGS=""
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          SYNC_ARGS="$SYNC_ARGS --dry-run"
        fi
        
        if [ "${{ github.event.inputs.preserve_analytics }}" = "true" ]; then
          SYNC_ARGS="$SYNC_ARGS --preserve-analytics"
        fi
        
        SYNC_ARGS="$SYNC_ARGS --mode=${{ github.event.inputs.sync_mode }}"
        
        node scripts/deploy/sync-to-prod.js $SYNC_ARGS
        
    - name: 📊 Generate Report
      run: |
        echo "## 📋 Sync Report: DEV → PROD" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Direction:** DEV → PROD" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode:** ${{ github.event.inputs.sync_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Preserve Analytics:** ${{ github.event.inputs.preserve_analytics }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  sync-prod-to-dev:
    if: github.event.inputs.sync_direction == 'prod-to-dev' || github.event.inputs.sync_direction == 'bidirectional'
    runs-on: ubuntu-latest
    name: 🔄 Sync PROD → DEV
    
    steps:
    - name: 📋 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📊 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: 🔧 Install Dependencies
      run: npm ci
      
    - name: 📦 Create DEV Backup
      if: github.event.inputs.create_backup != 'false'
      run: |
        echo "📦 Creating development backup..."
        mkdir -p backups/automated
        
        BACKUP_FILE="backups/automated/dev_backup_$(date +%Y%m%d_%H%M%S).sql"
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "[DRY RUN] Backup would be created: $BACKUP_FILE"
        else
          echo "Creating backup: $BACKUP_FILE"
          PGPASSWORD=video123 pg_dump -h localhost -U video_ia_user -d video_ia_net -f "$BACKUP_FILE"
        fi
        
    - name: 🔄 Execute Sync PROD → DEV
      env:
        DEV_DB_HOST: localhost
        DEV_DB_PASSWORD: video123
        PROD_DB_HOST: 46.202.129.104
        PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      run: |
        echo "🔄 Starting PROD → DEV synchronization..."
        echo "Mode: ${{ github.event.inputs.sync_mode }}"
        echo "Dry run: ${{ github.event.inputs.dry_run }}"
        
        SYNC_ARGS=""
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          SYNC_ARGS="$SYNC_ARGS --dry-run"
        fi
        
        SYNC_ARGS="$SYNC_ARGS --mode=${{ github.event.inputs.sync_mode }}"
        
        node scripts/deploy/sync-from-prod.js $SYNC_ARGS
        
    - name: 📊 Generate Report
      run: |
        echo "## 📋 Sync Report: PROD → DEV" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Direction:** PROD → DEV" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode:** ${{ github.event.inputs.sync_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  validate-sync:
    if: always()
    needs: [sync-dev-to-prod, sync-prod-to-dev]
    runs-on: ubuntu-latest
    name: ✅ Validate Synchronization
    
    steps:
    - name: 📋 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📊 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: 🔧 Install Dependencies
      run: npm ci
      
    - name: 🔍 Validate Database Consistency
      env:
        DEV_DB_PASSWORD: video123
        PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      run: |
        echo "🔍 Validating database consistency..."
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "[DRY RUN] Validation would be performed"
        else
          node scripts/deploy/database-analyzer.js --compare-all --verbose
        fi
        
    - name: 🌐 Test Endpoints
      run: |
        echo "🌐 Testing application endpoints..."
        
        # Test DEV endpoint
        if curl -f -s "http://localhost:3000/api/tools?limit=1" > /dev/null; then
          echo "✅ DEV endpoint OK"
        else
          echo "❌ DEV endpoint failed"
        fi
        
        # Test PROD endpoint
        if curl -f -s "https://www.video-ia.net/api/tools?limit=1" > /dev/null; then
          echo "✅ PROD endpoint OK"
        else
          echo "⚠️ PROD endpoint not accessible (may be expected)"
        fi
        
    - name: 📊 Final Summary
      run: |
        echo "## 🎯 Synchronization Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.sync-dev-to-prod.result }}" != "skipped" ]; then
          echo "- **DEV → PROD:** ${{ needs.sync-dev-to-prod.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.sync-prod-to-dev.result }}" != "skipped" ]; then
          echo "- **PROD → DEV:** ${{ needs.sync-prod-to-dev.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Direction:** ${{ github.event.inputs.sync_direction }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode:** ${{ github.event.inputs.sync_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Completed:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **All synchronization tasks completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Some synchronization tasks had issues. Please check the logs.**" >> $GITHUB_STEP_SUMMARY
        fi