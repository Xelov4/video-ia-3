name: 🔄 Sync Database PROD → DEV

on:
  workflow_dispatch:
    inputs:
      sync_mode:
        description: 'Sync mode'
        type: choice
        options: 
          - 'content_only'   # Content without analytics
          - 'full'           # Everything including analytics
          - 'tools_only'     # Tools table only
          - 'categories_only' # Categories only
          - 'translations_only' # Translations only
          - 'selective'      # Custom selection
        default: 'content_only'
        required: true
      
      tables_to_sync:
        description: 'Tables to sync (for selective mode, comma-separated)'
        type: string
        default: 'tools,categories,tool_translations,category_translations'
        required: false
      
      dry_run:
        description: 'Dry run (preview changes without applying)'
        type: boolean
        default: true
        required: false
      
      preserve_dev_data:
        description: 'Preserve specific DEV data (created_at, local configs)'
        type: boolean
        default: true
        required: false
      
      backup_before_sync:
        description: 'Create backup before sync'
        type: boolean
        default: true
        required: false

jobs:
  pre_sync_validation:
    name: Pre-Sync Validation
    runs-on: ubuntu-latest
    outputs:
      prod_tools_count: ${{ steps.count_prod.outputs.count }}
      dev_tools_count: ${{ steps.count_dev.outputs.count }}
      can_proceed: ${{ steps.validate.outputs.can_proceed }}
      
    steps:
      - name: 📋 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Count PROD Tools
        id: count_prod
        run: |
          count=$(PGPASSWORD="${{ secrets.PROD_DB_PASSWORD }}" psql -h "${{ secrets.PROD_DB_HOST }}" -U "${{ secrets.PROD_DB_USER }}" -d "${{ secrets.PROD_DB_NAME }}" -t -c "SELECT COUNT(*) FROM tools WHERE is_active = true;")
          echo "count=$count" >> $GITHUB_OUTPUT
          echo "📊 PROD Database: $count active tools"

      - name: 🔍 Count DEV Tools  
        id: count_dev
        run: |
          count=$(PGPASSWORD="${{ secrets.DEV_DB_PASSWORD }}" psql -h "${{ secrets.DEV_DB_HOST }}" -U "${{ secrets.DEV_DB_USER }}" -d "${{ secrets.DEV_DB_NAME }}" -t -c "SELECT COUNT(*) FROM tools WHERE is_active = true;")
          echo "count=$count" >> $GITHUB_OUTPUT
          echo "📊 DEV Database: $count active tools"

      - name: ✅ Validate Sync Conditions
        id: validate
        run: |
          prod_count="${{ steps.count_prod.outputs.count }}"
          dev_count="${{ steps.count_dev.outputs.count }}"
          
          # Remove whitespace
          prod_count=$(echo $prod_count | tr -d ' ')
          dev_count=$(echo $dev_count | tr -d ' ')
          
          echo "📊 Validation Results:"
          echo "- PROD: $prod_count tools"
          echo "- DEV: $dev_count tools"
          
          # Safety checks
          if [ "$prod_count" -lt 1000 ]; then
            echo "❌ PROD database seems too small ($prod_count < 1000)"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Warning for large differences
          if [ "$dev_count" -gt 0 ]; then
            diff=$((prod_count - dev_count))
            abs_diff=${diff#-}
            percent=$((abs_diff * 100 / dev_count))
            
            if [ "$percent" -gt 75 ]; then
              echo "⚠️ Large difference detected: ${percent}% ($diff tools)"
              echo "DEV will be significantly updated"
            fi
          fi
          
          echo "✅ Sync validation passed"
          echo "can_proceed=true" >> $GITHUB_OUTPUT

  sync_database:
    name: Sync Database  
    runs-on: ubuntu-latest
    needs: pre_sync_validation
    if: needs.pre_sync_validation.outputs.can_proceed == 'true'
    
    steps:
      - name: 📋 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 📦 Backup DEV Database
        if: ${{ inputs.backup_before_sync }}
        run: |
          echo "📦 Creating DEV backup..."
          BACKUP_FILE="backup_dev_$(date +%Y%m%d_%H%M%S).sql"
          PGPASSWORD="${{ secrets.DEV_DB_PASSWORD }}" pg_dump \
            -h "${{ secrets.DEV_DB_HOST }}" \
            -U "${{ secrets.DEV_DB_USER }}" \
            -d "${{ secrets.DEV_DB_NAME }}" \
            --clean --if-exists \
            -f "$BACKUP_FILE"
          
          echo "✅ Backup created: $BACKUP_FILE"
          echo "📊 Backup size: $(du -h $BACKUP_FILE | cut -f1)"

      - name: 🔄 Execute Database Sync
        run: |
          echo "🚀 Starting database sync PROD → DEV"
          echo "Mode: ${{ inputs.sync_mode }}"
          echo "Dry run: ${{ inputs.dry_run }}"
          echo "Preserve DEV data: ${{ inputs.preserve_dev_data }}"
          
          # Run the sync script
          npm run sync:from-prod -- \
            --mode="${{ inputs.sync_mode }}" \
            --tables="${{ inputs.tables_to_sync }}" \
            ${{ inputs.dry_run && '--dry-run' || '' }} \
            ${{ inputs.preserve_dev_data && '--preserve-dev-data' || '' }}

      - name: 🔍 Post-Sync Validation
        if: ${{ !inputs.dry_run }}
        run: |
          echo "🔍 Validating sync results..."
          
          # Count tools after sync
          new_count=$(PGPASSWORD="${{ secrets.DEV_DB_PASSWORD }}" psql -h "${{ secrets.DEV_DB_HOST }}" -U "${{ secrets.DEV_DB_USER }}" -d "${{ secrets.DEV_DB_NAME }}" -t -c "SELECT COUNT(*) FROM tools WHERE is_active = true;")
          new_count=$(echo $new_count | tr -d ' ')
          
          echo "📊 Post-sync DEV tools: $new_count"
          echo "📊 Original PROD tools: ${{ needs.pre_sync_validation.outputs.prod_tools_count }}"
          
          # Basic validation
          if [ "$new_count" -lt 1000 ]; then
            echo "❌ Post-sync validation failed: too few tools"
            exit 1
          fi
          
          # Check database integrity
          integrity_check=$(PGPASSWORD="${{ secrets.DEV_DB_PASSWORD }}" psql -h "${{ secrets.DEV_DB_HOST }}" -U "${{ secrets.DEV_DB_USER }}" -d "${{ secrets.DEV_DB_NAME }}" -t -c "SELECT COUNT(*) FROM tools t LEFT JOIN tool_translations tt ON t.id = tt.tool_id WHERE tt.tool_id IS NULL;")
          integrity_check=$(echo $integrity_check | tr -d ' ')
          
          if [ "$integrity_check" -gt 0 ]; then
            echo "⚠️ Found $integrity_check tools without translations"
          fi
          
          echo "✅ Post-sync validation passed"

      - name: 🔄 Refresh Local Cache
        if: ${{ !inputs.dry_run }}
        run: |
          echo "🔄 Refreshing local development cache..."
          # Clear Next.js cache if running locally
          if [ -d ".next" ]; then
            rm -rf .next
            echo "✅ Next.js cache cleared"
          fi

      - name: 📊 Sync Summary
        if: always()
        run: |
          echo "## 🔄 Database Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Direction**: PROD → DEV" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: ${{ inputs.sync_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PROD Tools**: ${{ needs.pre_sync_validation.outputs.prod_tools_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **DEV Tools (before)**: ${{ needs.pre_sync_validation.outputs.dev_tools_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            echo "- **Note**: This was a dry run - no changes applied" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Note**: Your local DEV database has been updated" >> $GITHUB_STEP_SUMMARY
            echo "- **Action**: Run \`npm run dev\` to see changes locally" >> $GITHUB_STEP_SUMMARY
          fi