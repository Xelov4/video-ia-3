/**
 * Tool Content Updater Service - VERSION OPTIMIS√âE 2025
 *
 * ‚ö° OPTIMISATION MAJEURE: 53 ‚Üí 17 appels API Gemini (-68% d'appels)
 * üÜï NOUVELLE HI√âRARCHIE: Gemini 2.5 Pro ‚Üí 1.5 Flash-8B (8 mod√®les)
 * üîÑ SYST√àME R√âVOLUTIONNAIRE: Recommencement complet de la hi√©rarchie √† chaque appel
 * ‚úÖ Rate limiting 90s entre requ√™tes (respect strict limite API)
 * ‚úÖ Traductions JSON unifi√©es (1 prompt par langue au lieu de 7)
 *
 * Service pour mettre √† jour automatiquement le contenu des outils IA :
 * - Test HTTP status
 * - Crawling des pages
 * - Extraction des r√©seaux sociaux
 * - Extraction des liens utiles
 * - G√©n√©ration de contenu IA (11 √©tapes anglaises)
 * - Traductions multilangues (1 appel unifi√© par langue au lieu de 7)
 *
 * üìä √âCONOMIE D'APPELS API:
 * - AVANT: 11 (anglais) + 42 (6 langues √ó 7 champs) = 53 appels
 * - APR√àS: 11 (anglais) + 6 (6 langues √ó 1 prompt unifi√©) = 17 appels
 * - √âCONOMIE: 36 appels (-68%)
 *
 * üß† HI√âRARCHIE GEMINI 2025:
 * 1. Gemini 2.5 Pro (Premium) ‚Üí 2. Gemini 2.5 Flash ‚Üí 3. Gemini 2.5 Flash-Lite
 * 4. Gemini 2.0 Flash ‚Üí 5. Gemini 2.0 Flash-Lite ‚Üí 6. Gemini 1.5 Flash
 * 7. Gemini 1.5 Pro ‚Üí 8. Gemini 1.5 Flash-8B (dernier recours)
 *
 * üîÑ SYST√àME DE RECOMMENCEMENT:
 * - Chaque appel recommence TOUTE la hi√©rarchie depuis le mod√®le premium
 * - Maximum 3 tentatives compl√®tes de la hi√©rarchie
 * - R√©silience maximale avec 8 niveaux de fallback
 *
 * @author Video-IA.net Development Team
 * @version 5.1 - Hi√©rarchie Gemini 2.5 + Recommencement complet
 */

import { prisma } from '../database/client';
import { Tool } from '@prisma/client';
import * as fs from 'fs/promises';
import * as path from 'path';
import axios, { AxiosResponse } from 'axios';
import * as cheerio from 'cheerio';
import { GoogleGenAI } from '@google/genai';
import puppeteer from 'puppeteer';

export interface ToolUpdateResult {
  toolId: number;
  toolName: string;
  status: 'success' | 'failed' | 'inactive';
  step:
    | 'http_check'
    | 'screenshot'
    | 'crawling'
    | 'social_extraction'
    | 'useful_links'
    | 'content_generation'
    | 'overview_generation'
    | 'keyfeatures_generation'
    | 'meta_generation'
    | 'pricing_generation'
    | 'usecases_generation'
    | 'targetaudience_generation'
    | 'completed';
  httpStatusCode?: number;
  isActive?: boolean;
  socialLinks?: {
    socialLinkedin?: string;
    socialFacebook?: string;
    socialX?: string;
    socialGithub?: string;
    socialDiscord?: string;
    socialInstagram?: string;
    socialTiktok?: string;
  };
  usefulLinks?: {
    mailAddress?: string;
    docsLink?: string;
    affiliateLink?: string;
    changelogLink?: string;
  };
  generatedContent?: string;
  generatedOverview?: string;
  generatedKeyFeatures?: string;
  generatedMetaTitle?: string;
  generatedMetaDescription?: string;
  generatedPricingModel?: string;
  generatedUseCases?: string;
  generatedTargetAudience?: string;
  screenshotPath?: string;
  errors?: string[];
  processedPages?: number;
}

export interface CrawledContent {
  url: string;
  content: string;
  title: string;
  html: string;
}

export class ToolContentUpdaterServiceOptimized {
  private static readonly TEMP_DIR_PREFIX = 'temporary.';
  private static readonly MAX_PAGES_TO_CRAWL = 50;
  private static readonly REQUEST_TIMEOUT = 10000;
  private static readonly CRAWL_DELAY = 1000; // D√©lai entre les requ√™tes en ms

  // Configuration Gemini API - NOUVELLE HI√âRARCHIE 2025
  private static readonly GEMINI_API_KEY = process.env.GEMINI_API_KEY;
  private static readonly GEMINI_MODELS = [
    'gemini-2.5-pro', // 1er choix - Mod√®le le plus r√©cent et performant
    'gemini-2.5-flash', // 2√®me choix - Flash 2.5 optimis√©
    'gemini-2.5-flash-lite', // 3√®me choix - Flash-Lite 2.5 l√©ger
    'gemini-2.0-flash', // 4√®me choix - Flash 2.0 stable
    'gemini-2.0-flash-lite', // 5√®me choix - Flash-Lite 2.0 l√©ger
    'gemini-1.5-flash', // 6√®me choix - Flash 1.5 √©prouv√©
    'gemini-1.5-pro', // 7√®me choix - Pro 1.5 stable
    'gemini-1.5-flash-8b', // 8√®me choix - Flash 8B ultra-l√©ger (dernier recours)
  ];
  private static readonly RATE_LIMIT_DELAY_MS = 90000; // 90 secondes entre requ√™tes
  private static lastGeminiCallTime = 0; // Timestamp dernier appel pour rate limiting
  private static readonly ai = this.GEMINI_API_KEY
    ? new GoogleGenAI({ apiKey: this.GEMINI_API_KEY })
    : null;

  /**
   * √âtape 1 : Test HTTP Status et validation de l'URL
   */
  static async checkHttpStatus(tool: Tool): Promise<{
    httpStatusCode: number;
    isActive: boolean;
    redirectUrl?: string;
  }> {
    try {
      const response: AxiosResponse = await axios.get(tool.toolLink!, {
        timeout: this.REQUEST_TIMEOUT,
        maxRedirects: 5,
        validateStatus: status => status < 600, // Accepter tous les codes < 600
      });

      const httpStatusCode = response.status;
      const isActive = httpStatusCode >= 200 && httpStatusCode < 400;

      // Mise √† jour dans la DB via Prisma
      console.log(`üìä Mise √† jour DB: HTTP ${httpStatusCode}, isActive: ${isActive}`);
      const updatedTool = await prisma.tool.update({
        where: { id: tool.id },
        data: {
          httpStatusCode,
          isActive,
          lastCheckedAt: new Date(),
          updatedAt: new Date(),
        },
      });
      console.log(
        `‚úÖ DB mise √† jour confirm√©e via Prisma - Tool ID: ${updatedTool.id}, HTTP: ${updatedTool.httpStatusCode}, Active: ${updatedTool.isActive}`
      );

      return {
        httpStatusCode,
        isActive,
        redirectUrl:
          response.request.res?.responseUrl !== tool.toolLink
            ? response.request.res?.responseUrl
            : undefined,
      };
    } catch (error: any) {
      // En cas d'erreur, marquer comme inactif
      const httpStatusCode = error.response?.status || 0;
      console.log(`‚ùå Erreur HTTP: ${error.message}, Code: ${httpStatusCode}`);

      console.log(`üìä Mise √† jour DB: HTTP ${httpStatusCode}, isActive: false (√©chec)`);
      const updatedTool = await prisma.tool.update({
        where: { id: tool.id },
        data: {
          httpStatusCode,
          isActive: false,
          lastCheckedAt: new Date(),
          updatedAt: new Date(),
        },
      });
      console.log(
        `‚úÖ DB mise √† jour confirm√©e via Prisma - Tool ID: ${updatedTool.id}, HTTP: ${updatedTool.httpStatusCode}, Active: ${updatedTool.isActive} (outil marqu√© inactif)`
      );

      return {
        httpStatusCode,
        isActive: false,
      };
    }
  }

  /**
   * √âtape 1.5 : Capture d'√©cran de la page d'accueil
   */
  static async captureScreenshot(tool: Tool): Promise<string | null> {
    let browser = null;
    try {
      console.log(`üì∏ Capture d'√©cran de ${tool.toolLink}...`);

      // S'assurer que le dossier existe
      const publicImagesDir = path.join(process.cwd(), 'public', 'images', 'tools');
      try {
        await fs.mkdir(publicImagesDir, { recursive: true });
      } catch (error) {
        // Dossier existe d√©j√†
      }

      // G√©n√©rer le nom de fichier : nom de l'outil nettoy√© + .webp
      const sanitizedName = tool.toolName.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
      const screenshotPath = path.join(publicImagesDir, `${sanitizedName}.webp`);
      const relativeScreenshotPath = `/images/tools/${sanitizedName}.webp`;

      // Lancer Puppeteer
      browser = await puppeteer.launch({
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--single-process',
          '--disable-gpu',
        ],
      });

      const page = await browser.newPage();

      // Configuration de la page
      await page.setViewport({ width: 1200, height: 800 });
      await page.setUserAgent(
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
      );

      // Navigation vers la page
      await page.goto(tool.toolLink!, {
        waitUntil: 'networkidle2',
        timeout: 30000,
      });

      // Attendre 5 secondes comme demand√©
      await new Promise(resolve => setTimeout(resolve, 5000));

      // Prendre la capture d'√©cran en format WebP
      await page.screenshot({
        path: screenshotPath,
        type: 'webp',
        quality: 80,
        fullPage: false, // Seulement la partie visible
      });

      console.log(`‚úÖ Screenshot sauvegard√©: ${relativeScreenshotPath}`);
      return relativeScreenshotPath;
    } catch (error: any) {
      console.error(`‚ùå Erreur capture d'√©cran: ${error.message}`);
      return null;
    } finally {
      if (browser) {
        await browser.close();
      }
    }
  }

  /**
   * √âtape 2 : Crawling des 50 premi√®res pages
   */
  static async crawlToolPages(tool: Tool): Promise<{
    tempDirPath: string;
    crawledPages: CrawledContent[];
  }> {
    const sanitizedName = tool.toolName.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
    const tempDirPath = path.join(
      process.cwd(),
      `${this.TEMP_DIR_PREFIX}${sanitizedName}`
    );

    // Cr√©er le dossier temporaire
    try {
      await fs.mkdir(tempDirPath, { recursive: true });
    } catch (error) {
      // Dossier existe d√©j√†
    }

    const crawledPages: CrawledContent[] = [];
    const urlsToVisit = [tool.toolLink!];
    const visitedUrls = new Set<string>();

    const baseUrl = new URL(tool.toolLink!).origin;

    let crawlStopReason = '';
    let newLinksFound = 0;
    let errorCount = 0;

    for (let i = 0; i < this.MAX_PAGES_TO_CRAWL && urlsToVisit.length > 0; i++) {
      const currentUrl = urlsToVisit.shift()!;

      if (visitedUrls.has(currentUrl)) {
        console.log(`‚è≠Ô∏è  Page ${i + 1}: URL d√©j√† visit√©e, passage √† la suivante`);
        continue;
      }
      visitedUrls.add(currentUrl);

      console.log(
        `üîç Page ${i + 1}/${this.MAX_PAGES_TO_CRAWL}: Crawl de ${currentUrl}`
      );

      try {
        await new Promise(resolve => setTimeout(resolve, this.CRAWL_DELAY));

        const response = await axios.get(currentUrl, {
          timeout: this.REQUEST_TIMEOUT,
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; VideoIA-Bot/1.0)',
          },
        });

        const $ = cheerio.load(response.data);

        // Nettoyer le contenu
        $(
          'script, style, nav, header, footer, .cookie-banner, .advertisement'
        ).remove();

        const content = $('body').text().replace(/\s+/g, ' ').trim();
        const title = $('title').text() || $('h1').first().text() || 'No Title';

        const crawledContent: CrawledContent = {
          url: currentUrl,
          content,
          title,
          html: response.data,
        };

        crawledPages.push(crawledContent);

        // Sauvegarder dans le dossier temporaire
        const filename = `page_${i + 1}_${currentUrl.replace(/[^a-zA-Z0-9]/g, '_')}.json`;
        await fs.writeFile(
          path.join(tempDirPath, filename),
          JSON.stringify(crawledContent, null, 2)
        );

        console.log(
          `‚úÖ Page ${i + 1} crawl√©e: "${title}" (${content.length} caract√®res)`
        );

        // Extraire de nouveaux liens pour continuer le crawl
        if (crawledPages.length < this.MAX_PAGES_TO_CRAWL) {
          const linksBefore = urlsToVisit.length;
          $('a[href]').each((_, element) => {
            const href = $(element).attr('href');
            if (href) {
              try {
                const fullUrl = new URL(href, currentUrl).href;
                if (
                  fullUrl.startsWith(baseUrl) &&
                  !visitedUrls.has(fullUrl) &&
                  !urlsToVisit.includes(fullUrl)
                ) {
                  urlsToVisit.push(fullUrl);
                }
              } catch {
                // Ignorer les URLs malform√©es
              }
            }
          });
          const linksAfter = urlsToVisit.length;
          const newLinks = linksAfter - linksBefore;
          newLinksFound += newLinks;
          console.log(`üîó ${newLinks} nouveaux liens trouv√©s sur cette page`);
        }
      } catch (error: any) {
        errorCount++;
        console.error(`‚ùå Erreur lors du crawl de ${currentUrl}: ${error.message}`);
      }
    }

    // Analyser pourquoi on n'a pas atteint 50 pages
    if (crawledPages.length < this.MAX_PAGES_TO_CRAWL) {
      if (urlsToVisit.length === 0) {
        crawlStopReason = `Plus de liens internes √† crawler (${newLinksFound} liens d√©couverts au total)`;
      } else if (errorCount > crawledPages.length / 2) {
        crawlStopReason = `Trop d'erreurs de crawl (${errorCount} erreurs)`;
      } else {
        crawlStopReason = `Structure du site limit√©e (${crawledPages.length} pages accessibles)`;
      }

      console.log(
        `‚ö†Ô∏è  Crawling arr√™t√© √† ${crawledPages.length}/${this.MAX_PAGES_TO_CRAWL} pages`
      );
      console.log(`üìù Raison: ${crawlStopReason}`);
      console.log(
        `üìä Statistiques: ${newLinksFound} liens d√©couverts, ${errorCount} erreurs, ${visitedUrls.size} URLs visit√©es`
      );
    } else {
      console.log(
        `üéØ Crawling complet: ${this.MAX_PAGES_TO_CRAWL}/${this.MAX_PAGES_TO_CRAWL} pages crawl√©es`
      );
    }

    return {
      tempDirPath,
      crawledPages,
    };
  }

  /**
   * √âtape 3 : Extraction des liens des r√©seaux sociaux avec validation
   */
  static async extractSocialLinks(
    crawledPages: CrawledContent[],
    tool: Tool
  ): Promise<{
    socialLinkedin?: string;
    socialFacebook?: string;
    socialX?: string;
    socialGithub?: string;
    socialDiscord?: string;
    socialInstagram?: string;
    socialTiktok?: string;
  }> {
    const socialPatterns = {
      socialLinkedin: [
        /linkedin\.com\/company\/([^\/\s"']+)/gi,
        /linkedin\.com\/in\/([^\/\s"']+)/gi,
      ],
      socialFacebook: [/facebook\.com\/([^\/\s"']+)/gi, /fb\.me\/([^\/\s"']+)/gi],
      socialX: [/twitter\.com\/([^\/\s"']+)/gi, /x\.com\/([^\/\s"']+)/gi],
      socialGithub: [/github\.com\/([^\/\s"'?#]+)/gi],
      socialDiscord: [
        /discord\.gg\/([^\/\s"']+)/gi,
        /discord\.com\/invite\/([^\/\s"']+)/gi,
      ],
      socialInstagram: [/instagram\.com\/([^\/\s"']+)/gi],
      socialTiktok: [/tiktok\.com\/@([^\/\s"']+)/gi],
    };

    const socialLinks: any = {};

    // Cr√©er des mots-cl√©s de validation bas√©s sur l'outil
    const validationKeywords = this.generateValidationKeywords(tool);

    for (const page of crawledPages) {
      const combinedContent = `${page.content} ${page.html}`;

      for (const [platform, patterns] of Object.entries(socialPatterns)) {
        if (!socialLinks[platform]) {
          for (const pattern of patterns) {
            const matches = combinedContent.match(pattern);
            if (matches) {
              // Valider chaque match trouv√©
              for (const match of matches) {
                if (this.validateSocialLink(match, validationKeywords, platform)) {
                  socialLinks[platform] = match;
                  break;
                }
              }
              if (socialLinks[platform]) break;
            }
          }
        }
      }
    }

    console.log(
      `‚úÖ Liens sociaux extraits via regex: ${Object.keys(socialLinks).length} trouv√©s`
    );
    for (const [platform, link] of Object.entries(socialLinks)) {
      console.log(`   ${platform}: ${link}`);
    }

    return socialLinks;
  }

  /**
   * G√©n√®re des mots-cl√©s de validation pour l'outil
   */
  private static generateValidationKeywords(tool: Tool): string[] {
    const keywords: string[] = [];

    // Nom de l'outil (sans espaces, en minuscules)
    if (tool.toolName) {
      keywords.push(tool.toolName.toLowerCase().replace(/\s+/g, ''));
      keywords.push(tool.toolName.toLowerCase().replace(/\s+/g, '-'));
      keywords.push(tool.toolName.toLowerCase().replace(/\s+/g, '_'));

      // Variations du nom
      const nameParts = tool.toolName.toLowerCase().split(/\s+/);
      if (nameParts.length > 1) {
        keywords.push(...nameParts);
      }
    }

    // Extraire l'organisation/auteur depuis l'URL GitHub s'il y en a une
    if (tool.toolLink && tool.toolLink.includes('github.com')) {
      const githubMatch = tool.toolLink.match(/github\.com\/([^\/]+)/i);
      if (githubMatch && githubMatch[1]) {
        keywords.push(githubMatch[1].toLowerCase());
      }
    }

    // Extraire le domaine principal de l'URL
    if (tool.toolLink) {
      try {
        const url = new URL(tool.toolLink);
        const domain = url.hostname.replace('www.', '');
        const domainParts = domain.split('.');
        if (domainParts.length >= 2) {
          keywords.push(domainParts[0].toLowerCase()); // ex: "cassetteai" de "cassetteai.com"
        }
      } catch {
        // Ignorer les URLs malform√©es
      }
    }

    return keywords;
  }

  /**
   * Valide qu'un lien social est vraiment li√© √† l'outil
   */
  private static validateSocialLink(
    link: string,
    validationKeywords: string[],
    platform: string
  ): boolean {
    const linkLower = link.toLowerCase();

    // Rejeter les liens g√©n√©riques ou de platforms
    const genericPatterns = [
      'github.com/github',
      'facebook.com/facebook',
      'twitter.com/twitter',
      'instagram.com/instagram',
      'linkedin.com/company/linkedin',
      'discord.com/discord',
      'tiktok.com/@tiktok',
    ];

    if (genericPatterns.some(generic => linkLower.includes(generic))) {
      return false;
    }

    // V√©rifier si le lien contient un des mots-cl√©s de validation
    for (const keyword of validationKeywords) {
      if (keyword.length >= 3 && linkLower.includes(keyword)) {
        return true;
      }
    }

    // Pour GitHub, accepter aussi si c'est dans le m√™me domaine que l'outil
    if (platform === 'socialGithub' && linkLower.includes('github.com')) {
      // D√©j√† une validation basique, on peut √™tre moins strict
      return true;
    }

    return false;
  }

  /**
   * √âtape 4 : Extraction des liens utiles avec logique regex optimis√©e
   */
  static async extractUsefulLinks(
    crawledPages: CrawledContent[],
    tool: Tool
  ): Promise<{
    mailAddress?: string;
    docsLink?: string;
    affiliateLink?: string;
    changelogLink?: string;
  }> {
    console.log('üîç Extraction liens utiles avec logique regex optimis√©e...');
    const usefulLinks: any = {};

    // Patterns am√©lior√©s avec validation int√©gr√©e
    const patterns = {
      mailAddress: [
        /\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})\b/gi,
        /mailto:([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/gi,
        /contact[:\s]*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/gi,
      ],
      docsLink: [
        /href=["']([^"']*(?:docs|documentation|api|guide|manual|help)[^"']*)["']/gi,
        /https?:\/\/[^\s"'<>]*(?:docs|documentation|api|guide|manual|help)[^\s"'<>]*/gi,
        /\b(?:docs|documentation|api|guide)\.[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b/gi,
      ],
      affiliateLink: [
        /href=["']([^"']*(?:affiliate|ref=|utm_|partner|referral)[^"']*)["']/gi,
        /https?:\/\/[^\s"'<>]*(?:affiliate|ref=|utm_|partner|referral)[^\s"'<>]*/gi,
      ],
      changelogLink: [
        /href=["']([^"']*(?:changelog|release|updates|news|version|whats-new)[^"']*)["']/gi,
        /https?:\/\/[^\s"'<>]*(?:changelog|release|updates|news|version|whats-new)[^\s"'<>]*/gi,
        /\b(?:changelog|releases)\.[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b/gi,
      ],
    };

    // Extraction avec scoring et validation
    const linkScores: { [key: string]: { [link: string]: number } } = {
      mailAddress: {},
      docsLink: {},
      affiliateLink: {},
      changelogLink: {},
    };

    for (const page of crawledPages) {
      const combinedContent = `${page.content} ${page.html}`;

      // Extraire tous les liens avec scoring
      for (const [linkType, linkPatterns] of Object.entries(patterns)) {
        for (const pattern of linkPatterns) {
          const matches = combinedContent.matchAll(pattern);

          for (const match of matches) {
            let extractedLink = match[1] || match[0];

            // Nettoyer le lien
            extractedLink = extractedLink
              .replace(/^href=["']/, '')
              .replace(/["'].*$/, '')
              .replace(/^mailto:/, '')
              .trim();

            // Filtrer les liens valides
            if (this.isValidUsefulLink(extractedLink, linkType, tool)) {
              if (!linkScores[linkType][extractedLink]) {
                linkScores[linkType][extractedLink] = 0;
              }
              linkScores[linkType][extractedLink]++;
            }
          }
        }
      }
    }

    // S√©lectionner le meilleur lien pour chaque type
    for (const [linkType, links] of Object.entries(linkScores)) {
      if (Object.keys(links).length > 0) {
        // Prendre le lien avec le score le plus √©lev√©
        const bestLink = Object.entries(links).sort(([, a], [, b]) => b - a)[0][0];

        usefulLinks[linkType] = bestLink;
      }
    }

    console.log(
      `‚úÖ Liens utiles extraits via regex: ${Object.keys(usefulLinks).length} types trouv√©s`
    );
    for (const [type, link] of Object.entries(usefulLinks)) {
      console.log(`   ${type}: ${link}`);
    }

    return usefulLinks;
  }

  /**
   * Valide qu'un lien utile est pertinent pour l'outil
   */
  private static isValidUsefulLink(
    link: string,
    linkType: string,
    tool: Tool
  ): boolean {
    if (!link || link.length < 5) return false;

    // Exclusions g√©n√©riques
    const genericExclusions = [
      'mailto:',
      'javascript:',
      '#',
      'example.com',
      'test.com',
      'localhost',
    ];

    if (genericExclusions.some(exclusion => link.includes(exclusion))) {
      return false;
    }

    // Validation sp√©cifique par type
    switch (linkType) {
      case 'mailAddress':
        return (
          /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(link) &&
          !link.includes('noreply') &&
          !link.includes('example')
        );

      case 'docsLink':
        return (
          link.startsWith('http') &&
          (link.includes('docs') ||
            link.includes('documentation') ||
            link.includes('api') ||
            link.includes('guide'))
        );

      case 'affiliateLink':
        return (
          link.startsWith('http') &&
          (link.includes('affiliate') ||
            link.includes('ref=') ||
            link.includes('utm_') ||
            link.includes('partner'))
        );

      case 'changelogLink':
        return (
          link.startsWith('http') &&
          (link.includes('changelog') ||
            link.includes('release') ||
            link.includes('updates') ||
            link.includes('news'))
        );

      default:
        return true;
    }
  }

  /**
   * √âtape 5 : G√©n√©ration de contenu avec IA Gemini
   */
  static async generateToolContent(
    tool: Tool,
    crawledPages: CrawledContent[]
  ): Promise<string> {
    try {
      if (!this.ai) {
        console.log('‚ö†Ô∏è Gemini API non disponible, utilisation du fallback');
        return this.generateFallbackContent(tool);
      }

      // Pr√©parer le contenu crawl√© pour l'IA
      const crawledContent = crawledPages
        .map(
          page => `
=== ${page.title} (${page.url}) ===
${page.content.substring(0, 2000)}...
`
        )
        .join('\n');

      // Prompt optimis√© pour Gemini - EN ANGLAIS
      const prompt = `You are a passionate journalist specializing in AI Tools and technologies. You are 28 years old and you love speaking directly to your audience while respecting them and paying great attention to the quality and clarity of the information you provide. You constantly try to give additional details and examples to dig deeper into topics.

Here is a collection of several web pages about the tool ${tool.toolName}. I want you to write an article that explains what this tool is, what it's used for, and why someone would want to use it. I also want you to give reasons why this tool might not be the most interesting option, if you find any. You don't need to follow this brief to the letter.

I want you to write a minimum of 300 words divided into at least 3 parts and up to 6 parts. Use H2 titles and always use "What's ${tool.toolName}?" for the first title. For the other titles, you can choose.

IMPORTANT: Write the entire article in ENGLISH.

Tool to analyze: ${tool.toolName}
Category: ${tool.toolCategory || 'Undefined'}
URL: ${tool.toolLink}

Content from crawled pages:
${crawledContent}

Write the article now in markdown format with H2 titles:`;

      // Tentative avec les mod√®les Gemini (avec fallback)
      return await this.callGeminiWithFallback(prompt);
    } catch (error: any) {
      console.error('‚ùå Erreur g√©n√©ration contenu Gemini:', error.message);
      return this.generateFallbackContent(tool);
    }
  }

  /**
   * Appel Gemini avec syst√®me de fallback entre mod√®les
   * ‚ö° NOUVEAU: Rate limiting strict de 90s entre chaque appel
   * üÜï NOUVEAU: Recommence TOUTE la hi√©rarchie pour chaque appel
   *
   * üïê SYST√àME DE RATE LIMITING SIMPLIFI√â:
   * 1. Rate limiting: 90 secondes entre chaque appel
   * 2. Fallback: 8 mod√®les Gemini test√©s en ordre de priorit√©
   * 3. Gestion rate limit: Attente suppl√©mentaire si d√©tect√©
   * 4. NOUVEAU: Chaque appel recommence depuis le mod√®le premium
   *
   * üéØ OBJECTIF: Respecter strictement les limites API Gemini
   * - √âviter le blocage temporaire du compte
   * - Maintenir la stabilit√© des performances
   * - Garantir la fiabilit√© du service
   * - Maximiser les chances de succ√®s avec le meilleur mod√®le disponible
   */
  private static async callGeminiWithFallback(prompt: string): Promise<string> {
    if (!this.ai) {
      throw new Error('Gemini API non disponible');
    }

    // üïê RATE LIMITING: Respecter 90 secondes entre requ√™tes
    const now = Date.now();
    const timeSinceLastCall = now - this.lastGeminiCallTime;

    if (timeSinceLastCall < this.RATE_LIMIT_DELAY_MS) {
      const waitTime = this.RATE_LIMIT_DELAY_MS - timeSinceLastCall;
      console.log(
        `‚è±Ô∏è  Rate limiting: Attente ${(waitTime / 1000).toFixed(1)}s avant requ√™te Gemini...`
      );
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }

    this.lastGeminiCallTime = Date.now();

    let lastError: Error | null = null;
    let attemptCount = 0;
    const maxAttempts = 3; // Maximum 3 tentatives compl√®tes de la hi√©rarchie

    // üîÑ BOUCLE DE TENTATIVES COMPL√àTES DE LA HI√âRARCHIE
    while (attemptCount < maxAttempts) {
      attemptCount++;
      console.log(
        `\nüîÑ TENTATIVE COMPL√àTE ${attemptCount}/${maxAttempts} - Recommencement de toute la hi√©rarchie`
      );
      console.log(`üìã Ordre des mod√®les: ${this.GEMINI_MODELS.join(' ‚Üí ')}`);

      // Essayer chaque mod√®le de la hi√©rarchie (depuis le d√©but)
      for (let i = 0; i < this.GEMINI_MODELS.length; i++) {
        const modelName = this.GEMINI_MODELS[i];
        const modelPosition = i + 1;

        try {
          console.log(
            `  üîÑ [${modelPosition}/${this.GEMINI_MODELS.length}] Test avec ${modelName}...`
          );

          const genModel = this.ai.models.generateContent({
            model: modelName,
            contents: prompt,
          });

          const result = await genModel;
          const text = result.text;

          if (!text || text.length < 200) {
            throw new Error('R√©ponse trop courte ou vide');
          }

          console.log(`  ‚úÖ SUCC√àS avec ${modelName} (${text.length} caract√®res)`);
          console.log(
            `  üèÜ Mod√®le gagnant: ${modelName} (position ${modelPosition}/${this.GEMINI_MODELS.length})`
          );
          console.log(`  üìä Tentative compl√®te: ${attemptCount}/${maxAttempts}`);
          return text;
        } catch (error: any) {
          lastError = error;
          console.log(`  ‚ùå √âchec avec ${modelName}: ${error.message}`);

          // Gestion sp√©ciale des rate limits
          if (
            error.message.includes('overloaded') ||
            error.message.includes('rate limit')
          ) {
            console.log(`  ‚è≥ Rate limit d√©tect√©, attente suppl√©mentaire 5s...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
          }

          // Si c'est le dernier mod√®le de la hi√©rarchie, on va recommencer
          if (i === this.GEMINI_MODELS.length - 1) {
            console.log(
              `  üîÑ Fin de la hi√©rarchie atteinte, passage √† la tentative suivante...`
            );
          }
        }
      }

      // Si on arrive ici, toute la hi√©rarchie a √©chou√©
      console.log(
        `\n‚ö†Ô∏è  TENTATIVE ${attemptCount}/${maxAttempts} √âCHOU√âE - Toute la hi√©rarchie a √©chou√©`
      );

      if (attemptCount < maxAttempts) {
        console.log(`üîÑ Recommencement de toute la hi√©rarchie dans 10 secondes...`);
        await new Promise(resolve => setTimeout(resolve, 10000));
      }
    }

    // üö® TOUTES LES TENTATIVES ONT √âCHOU√â
    console.log(
      `\n‚ùå √âCHEC D√âFINITIF: ${maxAttempts} tentatives compl√®tes de la hi√©rarchie ont √©chou√©`
    );
    console.log(`üìã Hi√©rarchie test√©e: ${this.GEMINI_MODELS.join(' ‚Üí ')}`);
    throw (
      lastError ||
      new Error(
        `Tous les mod√®les Gemini ont √©chou√© apr√®s ${maxAttempts} tentatives compl√®tes`
      )
    );
  }

  /**
   * √âtape 6 : G√©n√©ration de l'overview concise avec IA Gemini
   */
  static async generateToolOverview(
    tool: Tool,
    crawledPages: CrawledContent[]
  ): Promise<string> {
    try {
      if (!this.ai) {
        console.log('‚ö†Ô∏è Gemini API non disponible, utilisation du fallback');
        return this.generateFallbackOverview(tool);
      }

      // Pr√©parer un r√©sum√© du contenu crawl√© pour l'IA
      const crawledSummary = crawledPages
        .slice(0, 3)
        .map(page => `${page.title}: ${page.content.substring(0, 500)}...`)
        .join('\n\n');

      // Prompt optimis√© pour overview concise
      const prompt = `You are an expert at writing concise tool descriptions. Based on the crawled content below, write a very brief overview of ${tool.toolName}.

Tool: ${tool.toolName}
Category: ${tool.toolCategory || 'AI Tool'}
URL: ${tool.toolLink}

Crawled content summary:
${crawledSummary}

CRITICAL: Write EXACTLY 2 sentences. No more, no less. Each sentence should be concise and focused. This will be used as a preview in a tools grid on a website.

Write in ENGLISH only. Be direct and clear. Focus on the tool's primary function.

Example formats:
- "Visualizee is an AI-powered rendering tool that converts sketches into realistic 3D visualizations. It helps designers and architects create professional renders in seconds without complex 3D software."
- "QueryGPT is a NodeJS library for building custom Q&A chatbots using OpenAI's GPT models. It enables developers to create personalized knowledge bases and automated support systems."

Overview:`;

      // Appel Gemini
      const overviewResponse = await this.callGeminiWithFallback(prompt);

      // Nettoyer la r√©ponse
      let cleanOverview = overviewResponse.replace(/^Overview:?\s*/i, '').trim();

      if (!cleanOverview || cleanOverview.length < 20) {
        throw new Error('R√©ponse overview trop courte');
      }

      // Forcer exactement 2 phrases
      const sentences = cleanOverview.split(/[.!?]+/).filter(s => s.trim().length > 0);
      if (sentences.length !== 2) {
        if (sentences.length === 1) {
          throw new Error('Overview doit contenir exactement 2 phrases, 1 trouv√©e');
        } else {
          // Prendre exactement 2 phrases
          cleanOverview = sentences.slice(0, 2).join('. ') + '.';
        }
      } else {
        // S'assurer qu'on a bien les 2 phrases format√©es correctement
        cleanOverview = sentences.join('. ') + '.';
      }

      console.log(
        `‚úÖ Overview g√©n√©r√© avec succ√®s (${cleanOverview.length} caract√®res)`
      );
      return cleanOverview;
    } catch (error: any) {
      console.error('‚ùå Erreur g√©n√©ration overview Gemini:', error.message);
      return this.generateFallbackOverview(tool);
    }
  }

  /**
   * √âtape 7 : G√©n√©ration des key features avec IA Gemini
   */
  static async generateToolKeyFeatures(
    tool: Tool,
    crawledPages: CrawledContent[]
  ): Promise<string> {
    try {
      if (!this.ai) {
        console.log('‚ö†Ô∏è Gemini API non disponible, utilisation du fallback');
        return this.generateFallbackKeyFeatures(tool);
      }

      // Pr√©parer le contenu crawl√© pour l'IA
      const crawledContent = crawledPages
        .slice(0, 5)
        .map(page => `${page.title}: ${page.content.substring(0, 1000)}...`)
        .join('\n\n');

      // Prompt optimis√© pour key features
      const prompt = `You are an expert at identifying key use cases for tools. Based on the crawled content below, identify the main use cases and problems that ${tool.toolName} can solve.

Tool: ${tool.toolName}
Category: ${tool.toolCategory || 'AI Tool'}

Crawled content:
${crawledContent}

IMPORTANT: Create a bullet list of 3-6 key use cases/problems this tool solves. Each bullet should be:
- Very concise (max 10-15 words)
- Focus on WHAT problems it solves or WHAT tasks it helps with
- Be specific and actionable
- Written in ENGLISH

Format as markdown bullets like this:
‚Ä¢ Convert sketches into photorealistic 3D renderings
‚Ä¢ Generate product visualizations for marketing materials
‚Ä¢ Create architectural mockups from floor plans

Key Features:`;

      // Appel Gemini
      const featuresResponse = await this.callGeminiWithFallback(prompt);

      // Nettoyer la r√©ponse et extraire les bullet points
      let cleanFeatures = featuresResponse.replace(/^Key Features:?\s*/i, '').trim();

      // S'assurer qu'on a bien des bullet points
      if (
        !cleanFeatures.includes('‚Ä¢') &&
        !cleanFeatures.includes('-') &&
        !cleanFeatures.includes('*')
      ) {
        throw new Error('Pas de bullet points d√©tect√©s');
      }

      // Normaliser les bullet points
      cleanFeatures = cleanFeatures.replace(/^[*-]/gm, '‚Ä¢').replace(/^\d+\./gm, '‚Ä¢');

      console.log(`‚úÖ Key features g√©n√©r√©es avec succ√®s`);
      return cleanFeatures;
    } catch (error: any) {
      console.error('‚ùå Erreur g√©n√©ration key features Gemini:', error.message);
      return this.generateFallbackKeyFeatures(tool);
    }
  }

  /**
   * √âtape 8 : G√©n√©ration du meta title et meta description avec IA Gemini
   */
  static async generateToolMeta(
    tool: Tool,
    crawledPages: CrawledContent[]
  ): Promise<{
    metaTitle: string;
    metaDescription: string;
  }> {
    try {
      if (!this.ai) {
        console.log('‚ö†Ô∏è Gemini API non disponible, utilisation du fallback');
        return this.generateFallbackMeta(tool);
      }

      // Pr√©parer le contenu pour l'IA
      const crawledSummary = crawledPages
        .slice(0, 3)
        .map(page => `${page.title}: ${page.content.substring(0, 800)}...`)
        .join('\n\n');

      // Boucle avec validation stricte pour garantir "- Video-IA.net"
      let attempts = 0;
      const maxAttempts = 5;

      while (attempts < maxAttempts) {
        attempts++;
        console.log(
          `üîÑ Tentative ${attempts}/${maxAttempts} pour meta title avec Video-IA.net`
        );

        // Prompt ultra strict pour meta title
        const prompt = `You are an SEO expert. Create SEO-optimized meta title and description for ${tool.toolName}.

Tool: ${tool.toolName}
Category: ${tool.toolCategory || 'AI Tool'}

Content summary:
${crawledSummary}

CRITICAL REQUIREMENTS:
1. Meta Title: MUST end with " - Video-IA.net" (with space before dash)
2. Meta Title: MAXIMUM 70 characters INCLUDING the " - Video-IA.net" suffix
3. Meta Description: MAXIMUM 160 characters with call-to-action
4. Write in ENGLISH only

EXAMPLES of CORRECT format:
TITLE: Visualizee AI Rendering Tool - Video-IA.net
DESCRIPTION: Create stunning 3D renders from sketches in seconds. Try Visualizee free today!

Your response MUST follow this EXACT format:
TITLE: [max 55 chars] - Video-IA.net  
DESCRIPTION: [max 160 chars with CTA]`;

        try {
          const metaResponse = await this.callGeminiWithFallback(prompt);

          // Extraire title et description
          const titleMatch = metaResponse.match(/TITLE:\s*(.+)/i);
          const descMatch = metaResponse.match(/DESCRIPTION:\s*(.+)/i);

          if (!titleMatch || !descMatch) {
            console.log(`‚ùå Tentative ${attempts}: Format invalide, retry...`);
            continue;
          }

          const metaTitle = titleMatch[1].trim();
          const metaDescription = descMatch[1].trim().substring(0, 160);

          // VALIDATION STRICTE : le title doit se terminer par " - Video-IA.net"
          if (!metaTitle.endsWith(' - Video-IA.net')) {
            console.log(
              `‚ùå Tentative ${attempts}: Title ne se termine pas par " - Video-IA.net", retry...`
            );
            continue;
          }

          // V√©rifier la longueur
          if (metaTitle.length > 70) {
            console.log(
              `‚ùå Tentative ${attempts}: Title trop long (${metaTitle.length}/70), retry...`
            );
            continue;
          }

          // SUCC√àS !
          console.log(`‚úÖ Meta title valid√© avec Video-IA.net (tentative ${attempts})`);
          return { metaTitle, metaDescription };
        } catch (error: any) {
          console.log(`‚ùå Tentative ${attempts}: Erreur Gemini, retry...`);
          if (attempts === maxAttempts) throw error;
        }
      }

      // Si toutes les tentatives √©chouent, fallback avec correction manuelle
      console.log(
        '‚ö†Ô∏è Toutes les tentatives √©chou√©es, utilisation du fallback avec correction'
      );
      const fallbackMeta = this.generateFallbackMeta(tool);
      return fallbackMeta;
    } catch (error: any) {
      console.error('‚ùå Erreur g√©n√©ration meta Gemini:', error.message);
      return this.generateFallbackMeta(tool);
    }
  }

  /**
   * √âtape 9 : D√©tection du pricing model avec logique regex optimis√©e
   */
  static async generateToolPricingModel(
    tool: Tool,
    crawledPages: CrawledContent[]
  ): Promise<string> {
    try {
      console.log('üîç D√©tection pricing model avec analyse regex...');

      // Combiner tout le contenu crawl√©
      const allContent = crawledPages
        .map(page => `${page.title} ${page.content}`)
        .join(' ')
        .toLowerCase();

      // Patterns de d√©tection par mod√®le de pricing
      const pricingPatterns = {
        FREE: [
          /\b(completely\s+free|always\s+free|100%\s+free|forever\s+free)\b/,
          /\b(no\s+cost|no\s+charge|no\s+payment)\b/,
          /\b(free\s+forever|free\s+to\s+use)\b/,
        ],
        FREEMIUM: [
          /\b(free\s+plan|free\s+tier|free\s+version)\b/,
          /\b(upgrade\s+to\s+pro|premium\s+features)\b/,
          /\b(basic\s+free|free\s+with\s+limits)\b/,
          /\b(freemium|free\s+and\s+paid)\b/,
        ],
        SUBSCRIPTION: [
          /\b(monthly|yearly|annual)\s+(subscription|plan|billing)\b/,
          /\b\$\d+\/(month|year|mo|yr)\b/,
          /\b(subscribe|subscription|recurring)\b/,
          /\b(billed\s+(monthly|annually))\b/,
        ],
        ONE_TIME_PAYMENT: [
          /\b(one[- ]?time\s+(payment|purchase|fee))\b/,
          /\b(buy\s+once|single\s+payment|lifetime\s+access)\b/,
          /\b(permanent\s+license|one[- ]?off\s+payment)\b/,
        ],
        USAGE_BASED: [
          /\b(pay\s+per\s+use|per\s+api\s+call|credit[s]?\s+based)\b/,
          /\b(usage\s+based|pay\s+as\s+you\s+go)\b/,
          /\b(tokens?|credits?|api\s+calls?)\s+pricing\b/,
        ],
        CONTACT_FOR_PRICING: [
          /\b(contact\s+(us|sales)|custom\s+pricing)\b/,
          /\b(enterprise\s+pricing|quote|get\s+in\s+touch)\b/,
          /\b(talk\s+to\s+sales|request\s+demo)\b/,
        ],
      };

      // Calculer le score pour chaque mod√®le
      const scores: { [key: string]: number } = {};

      for (const [model, patterns] of Object.entries(pricingPatterns)) {
        scores[model] = 0;
        for (const pattern of patterns) {
          const matches = allContent.match(pattern);
          if (matches) {
            scores[model] += matches.length;
          }
        }
      }

      // Trouver le mod√®le avec le score le plus √©lev√©
      let detectedModel = 'FREEMIUM'; // Default fallback
      let maxScore = 0;

      for (const [model, score] of Object.entries(scores)) {
        if (score > maxScore) {
          maxScore = score;
          detectedModel = model;
        }
      }

      // Si aucun pattern d√©tect√©, utiliser une logique secondaire
      if (maxScore === 0) {
        if (allContent.includes('free') && allContent.includes('pro')) {
          detectedModel = 'FREEMIUM';
        } else if (allContent.includes('free')) {
          detectedModel = 'FREE';
        } else if (allContent.includes('$') || allContent.includes('price')) {
          detectedModel = 'SUBSCRIPTION';
        }
      }

      console.log(
        `‚úÖ Pricing model d√©tect√© via regex: ${detectedModel} (score: ${maxScore})`
      );
      return detectedModel;
    } catch (error: any) {
      console.error('‚ùå Erreur d√©tection pricing model:', error.message);
      return this.generateFallbackPricingModel(tool);
    }
  }

  /**
   * √âtape 10 : G√©n√©ration des use cases avec IA Gemini
   */
  static async generateToolUseCases(
    tool: Tool,
    crawledPages: CrawledContent[]
  ): Promise<string> {
    try {
      if (!this.ai) {
        console.log('‚ö†Ô∏è Gemini API non disponible, utilisation du fallback');
        return this.generateFallbackUseCases(tool);
      }

      // Pr√©parer le contenu pour l'IA
      const crawledContent = crawledPages
        .slice(0, 5)
        .map(page => `${page.title}: ${page.content.substring(0, 1000)}...`)
        .join('\n\n');

      // Prompt pour les use cases sp√©cifiques
      const prompt = `You are an expert at identifying practical use cases for tools. Based on the crawled content below, create specific, factual use cases for ${tool.toolName}.

Tool: ${tool.toolName}
Category: ${tool.toolCategory || 'AI Tool'}
URL: ${tool.toolLink}

Content from crawled pages:
${crawledContent}

IMPORTANT: Create exactly 3-4 bullet points that show specific, practical examples of what users can do with ${tool.toolName}. Each bullet should:
- Start with "${tool.toolName} helps you"
- Be very factual and specific
- Give concrete examples of tasks/outputs
- Be concise (max 15-20 words per bullet)
- Written in ENGLISH

Examples of good format:
‚Ä¢ Visualizee helps you convert architectural sketches into photorealistic 3D renderings
‚Ä¢ Visualizee helps you generate product mockups for marketing campaigns
‚Ä¢ Visualizee helps you create interior design visualizations from floor plans

Use Cases:`;

      // Appel Gemini
      const useCasesResponse = await this.callGeminiWithFallback(prompt);

      // Nettoyer la r√©ponse
      let cleanUseCases = useCasesResponse.replace(/^Use Cases:?\s*/i, '').trim();

      // Normaliser les bullet points
      cleanUseCases = cleanUseCases
        .replace(/^[*-]/gm, '‚Ä¢')
        .replace(/^\d+\./gm, '‚Ä¢')
        .replace(/^[\s]*‚Ä¢/gm, '‚Ä¢');

      // V√©rifier qu'on a des bullet points
      if (!cleanUseCases.includes('‚Ä¢')) {
        throw new Error('Pas de bullet points d√©tect√©s dans les use cases');
      }

      console.log(`‚úÖ Use cases g√©n√©r√©s avec succ√®s`);
      return cleanUseCases;
    } catch (error: any) {
      console.error('‚ùå Erreur g√©n√©ration use cases Gemini:', error.message);
      return this.generateFallbackUseCases(tool);
    }
  }

  /**
   * √âtape 11 : G√©n√©ration du target audience avec IA Gemini
   */
  static async generateToolTargetAudience(
    tool: Tool,
    crawledPages: CrawledContent[]
  ): Promise<string> {
    try {
      if (!this.ai) {
        console.log('‚ö†Ô∏è Gemini API non disponible, utilisation du fallback');
        return this.generateFallbackTargetAudience(tool);
      }

      // Pr√©parer le contenu pour l'IA
      const crawledContent = crawledPages
        .slice(0, 5)
        .map(page => `${page.title}: ${page.content.substring(0, 1000)}...`)
        .join('\n\n');

      // Prompt pour le target audience
      const prompt = `You are an expert at identifying target audiences for tools. Based on the crawled content below, identify the main target audiences for ${tool.toolName}.

Tool: ${tool.toolName}
Category: ${tool.toolCategory || 'AI Tool'}
URL: ${tool.toolLink}

Content from crawled pages:
${crawledContent}

IMPORTANT: Write a single paragraph of exactly 3-4 sentences that identifies 2-4 specific target audiences. Each sentence should:
- Mention a specific professional group or user type
- Explain WHY this tool is useful for them
- Reference specific features or capabilities
- Be very specific to this tool (not generic)
- Written in ENGLISH

Example format:
"${tool.toolName} is particularly valuable for architects and designers who need to quickly visualize concepts and present ideas to clients. Video game developers can leverage its rapid rendering capabilities to create environmental mockups and prototype visual assets. Marketing professionals benefit from its ability to generate product visualizations for campaigns without expensive 3D software. Real estate developers find it useful for creating property visualizations and marketing materials from basic plans."

Target Audience:`;

      // Appel Gemini
      const audienceResponse = await this.callGeminiWithFallback(prompt);

      // Nettoyer la r√©ponse
      let cleanAudience = audienceResponse.replace(/^Target Audience:?\s*/i, '').trim();

      // V√©rifier la longueur et le format paragraphe
      if (!cleanAudience || cleanAudience.length < 100) {
        throw new Error('R√©ponse target audience trop courte');
      }

      // V√©rifier qu'on a 3-4 phrases
      const sentences = cleanAudience.split(/[.!?]+/).filter(s => s.trim().length > 0);
      if (sentences.length < 3 || sentences.length > 4) {
        if (sentences.length > 4) {
          cleanAudience = sentences.slice(0, 4).join('. ') + '.';
        } else if (sentences.length < 3) {
          throw new Error('Target audience doit contenir 3-4 phrases');
        }
      }

      console.log(`‚úÖ Target audience g√©n√©r√© avec succ√®s`);
      return cleanAudience;
    } catch (error: any) {
      console.error('‚ùå Erreur g√©n√©ration target audience Gemini:', error.message);
      return this.generateFallbackTargetAudience(tool);
    }
  }

  /**
   * Pricing model de fallback si Gemini √©choue
   */
  private static generateFallbackPricingModel(tool: Tool): string {
    return 'FREEMIUM'; // Mod√®le le plus courant pour les outils IA
  }

  /**
   * Use cases de fallback si Gemini √©choue
   */
  private static generateFallbackUseCases(tool: Tool): string {
    return `‚Ä¢ ${tool.toolName} helps you automate repetitive ${tool.toolCategory?.toLowerCase() || 'digital'} tasks
‚Ä¢ ${tool.toolName} helps you streamline your workflow processes
‚Ä¢ ${tool.toolName} helps you improve productivity and efficiency`;
  }

  /**
   * Target audience de fallback si Gemini √©choue
   */
  private static generateFallbackTargetAudience(tool: Tool): string {
    return `${tool.toolName} is designed for professionals working in ${tool.toolCategory?.toLowerCase() || 'technology'} who need efficient solutions for their daily tasks. Small business owners and entrepreneurs can benefit from its automation capabilities to save time and reduce manual work. Content creators and digital marketers find it useful for streamlining their creative processes. Freelancers and consultants appreciate its ability to enhance productivity and deliver better results to clients.`;
  }

  /**
   * ================================================================
   * üåç SYST√àME DE TRADUCTION MULTILANGUE - C≈íUR DE L'APPLICATION
   * ================================================================
   *
   * Ce syst√®me constitue le C≈íUR de l'application multilangue Video-IA.net.
   * Il transforme le contenu anglais g√©n√©r√© en 6 langues suppl√©mentaires
   * avec une qualit√© et coh√©rence maximales.
   *
   * üéØ OBJECTIF PRINCIPAL:
   * Prendre du contenu anglais de qualit√© (g√©n√©r√© par les 11 √©tapes)
   * et le traduire automatiquement dans 6 langues europ√©ennes majeures
   * en respectant les contraintes techniques et √©ditoriales strictes.
   *
   * üåê LANGUES SUPPORT√âES (6 + anglais = 7 total):
   * - üá´üá∑ Fran√ßais (fr) - March√© francophone europ√©en et africain
   * - üáÆüáπ Italien (it) - March√© italien et suisse italien
   * - üá™üá∏ Espagnol (es) - March√© espagnol et hispano-am√©ricain
   * - üá©üá™ Allemand (de) - March√© allemand, autrichien, suisse allemand
   * - üá≥üá± N√©erlandais (nl) - March√© n√©erlandais et belge flamand
   * - üáµüáπ Portugais (pt) - March√© portugais et br√©silien
   *
   * üìù CHAMPS TRADUITS PAR LANGUE (7 champs critiques):
   * 1. overview - R√©sum√© outil (EXACTEMENT 2 phrases, <150 chars)
   * 2. description - Article complet (markdown, sections H2, >300 mots)
   * 3. metaTitle - Titre SEO (max 70 chars, DOIT finir par "- Video-IA.net")
   * 4. metaDescription - Description SEO (max 160 chars, call-to-action)
   * 5. keyFeatures - Fonctionnalit√©s (bullet points, 3-6 items)
   * 6. useCases - Cas d'usage (bullet points, commence par nom outil)
   * 7. targetAudience - Public cible (paragraphe 3-4 phrases)
   *
   * üèóÔ∏è ARCHITECTURE DU SYST√àME:
   *
   * generateToolTranslations() [FONCTION PRINCIPALE]
   *    ‚Üì
   * generateSingleLanguageTranslation() [PAR LANGUE]
   *    ‚Üì (7 prompts en parall√®le)
   * callGeminiWithFallback() [IA G√âN√âRATION]
   *    ‚Üì
   * cleanTranslationResponse() [NETTOYAGE & VALIDATION]
   *    ‚Üì
   * saveTranslationToDatabase() [SAUVEGARDE PRISMA]
   *
   * üöÄ PROCESSUS COMPLET MULTILANGUE:
   *
   * updateToolContentWithTranslations()
   *    ‚Üì
   * PHASE 1: updateToolContent() [11 √âTAPES ANGLAIS]
   *    ‚Üì
   * PHASE 2: generateToolTranslations() [6 LANGUES]
   *    ‚Üì
   * R√âSULTAT: 1 outil √ó 7 langues = support international complet
   *
   * ‚ö° PERFORMANCE & OPTIMISATIONS:
   * - Traductions en parall√®le par langue (Promise.all)
   * - 7 prompts simultan√©s par langue pour rapidit√© maximale
   * - Fallback sur 5 mod√®les Gemini pour r√©silience
   * - Mode test pour validation sans √©criture DB
   * - Gestion d'erreurs par langue (une √©choue, les autres continuent)
   *
   * üéõÔ∏è CONTR√îLE QUALIT√â INT√âGR√â:
   * - Prompts ultra-sp√©cialis√©s avec contraintes strictes
   * - Validation automatique des formats (longueur, structure)
   * - Nettoyage intelligent des r√©ponses IA
   * - Score qualit√© automatique (8.5/10 pour traductions IA)
   * - Tra√ßabilit√© compl√®te (source: 'ai_generated')
   *
   * üíæ PERSISTANCE DONN√âES:
   * - Table: tool_translations (Prisma ORM)
   * - Relation: toolId + languageCode (cl√© composite unique)
   * - Upsert: cr√©ation ou mise √† jour automatique
   * - Timestamps: created_at, updated_at automatiques
   *
   * üîß MODES D'UTILISATION:
   * - testMode=true: G√©n√©ration + validation, pas de sauvegarde
   * - testMode=false: G√©n√©ration + sauvegarde automatique en production
   * - Batch processing: Traitement multiple d'outils avec pause anti-rate-limit
   *
   * ‚ö†Ô∏è CONTRAINTES CRITIQUES RESPECT√âES:
   * - Meta titles DOIVENT finir par " - Video-IA.net" (branding obligatoire)
   * - Overviews DOIVENT avoir exactement 2 phrases (UX grid preview)
   * - Use cases DOIVENT commencer par le nom de l'outil (coh√©rence)
   * - Limites caract√®res SEO respect√©es (70 title, 160 description)
   * - Pr√©servation du nom d'outil original dans toutes les langues
   *
   * üåü VALEUR BUSINESS:
   * Ce syst√®me permet √† Video-IA.net de servir 7 march√©s linguistiques
   * avec un contenu de qualit√© professionnelle, augmentant drastiquement
   * la port√©e internationale et le SEO multilingue de la plateforme.
   */

  /**
   * üåç FONCTION PRINCIPALE - G√âN√âRATION TRADUCTIONS MULTILANGUES
   *
   * Cette fonction est le POINT D'ENTR√âE principal du syst√®me de traduction.
   * Elle orchestre la traduction d'un outil vers les 6 langues support√©es.
   *
   * üéØ R√îLE:
   * - Coordonner la traduction vers 6 langues (fr, it, es, de, nl, pt)
   * - G√©rer les erreurs par langue (isol√©es, non bloquantes)
   * - Fournir statistiques d√©taill√©es de succ√®s/√©checs
   * - Sauvegarder en base si mode production
   *
   * üì• PARAM√àTRES:
   * @param toolId - ID de l'outil √† traduire (cl√© primaire table tools)
   * @param generatedContent - Contenu anglais source (7 champs obligatoires)
   *   ‚Ä¢ overview: R√©sum√© 2 phrases de l'outil
   *   ‚Ä¢ description: Article complet markdown avec sections
   *   ‚Ä¢ metaTitle: Titre SEO avec branding Video-IA.net
   *   ‚Ä¢ metaDescription: Description SEO avec call-to-action
   *   ‚Ä¢ keyFeatures: Fonctionnalit√©s en bullet points
   *   ‚Ä¢ useCases: Cas d'usage pratiques avec nom outil
   *   ‚Ä¢ targetAudience: Public cible professionnel d√©taill√©
   * @param testMode - true: g√©n√©ration seule, false: g√©n√©ration + sauvegarde DB
   *
   * üì§ RETOUR:
   * Objet d√©taill√© avec:
   * - toolId: ID outil trait√©
   * - translations: Objet avec traductions par langue (fr, it, es, de, nl, pt)
   * - totalLanguages: Nombre total de langues trait√©es (6)
   * - successfulTranslations: Nombre de langues traduites avec succ√®s
   * - Statistiques d√©taill√©es des succ√®s/√©checs par langue
   *
   * üîÑ ALGORITHME:
   * 1. Valider l'outil existe en base
   * 2. Initialiser tableau des langues √† traiter
   * 3. BOUCLE pour chaque langue:
   *    a. Appeler generateSingleLanguageTranslation()
   *    b. Stocker r√©sultat (succ√®s ou erreur)
   *    c. Si mode production: sauvegarder en DB
   *    d. Logger progression en temps r√©el
   * 4. Retourner statistiques globales compl√®tes
   *
   * ‚ö° PERFORMANCE:
   * - Traitement s√©quentiel par langue (√©vite surcharge API Gemini)
   * - Gestion d'erreurs isol√©es (une langue √©choue, les autres continuent)
   * - Mode test ultra-rapide (pas d'√©criture DB)
   *
   * üõ°Ô∏è R√âSILIENCE:
   * - Continue m√™me si certaines langues √©chouent
   * - Erreurs d√©taill√©es par langue pour diagnostic
   * - Pas de rollback (chaque langue ind√©pendante)
   *
   * üí° USAGE TYPIQUE:
   * ```typescript
   * const result = await ToolContentUpdaterService.generateToolTranslations(
   *   6669,
   *   englishContent,
   *   false // Mode production = sauvegarde automatique
   * );
   * console.log(`${result.successfulTranslations}/${result.totalLanguages} langues traduites`);
   * ```
   */
  static async generateToolTranslations(
    toolId: number,
    generatedContent: {
      overview: string;
      description: string;
      metaTitle: string;
      metaDescription: string;
      keyFeatures: string;
      useCases: string;
      targetAudience: string;
    },
    testMode: boolean = true
  ): Promise<any> {
    try {
      const tool = await prisma.tool.findUnique({ where: { id: toolId } });
      if (!tool) throw new Error(`Tool ${toolId} not found`);

      // Langues √† traduire (incluant anglais pour coh√©rence)
      const languagesToTranslate = ['en', 'fr', 'it', 'es', 'de', 'nl', 'pt'];
      const translations: any = {};

      console.log(
        `üåê G√©n√©ration des traductions pour ${languagesToTranslate.length} langues...`
      );

      for (const langCode of languagesToTranslate) {
        console.log(`\nüîÑ Traduction vers ${langCode.toUpperCase()}...`);

        try {
          let translation: any;

          if (langCode === 'en') {
            // Pour l'anglais, copie directe depuis le contenu g√©n√©r√© (pas d'API)
            console.log(`üìã Copie directe du contenu anglais depuis la table Tool`);
            translation = {
              overview: generatedContent.overview,
              description: generatedContent.description,
              metaTitle: generatedContent.metaTitle,
              metaDescription: generatedContent.metaDescription,
              keyFeatures: generatedContent.keyFeatures,
              useCases: generatedContent.useCases,
              targetAudience: generatedContent.targetAudience,
            };
          } else {
            // Pour les autres langues, g√©n√©ration via IA
            translation = await this.generateSingleLanguageTranslation(
              tool,
              generatedContent,
              langCode
            );
          }

          translations[langCode] = translation;
          console.log(`‚úÖ Traduction ${langCode.toUpperCase()} termin√©e`);

          // Sauvegarder en DB si pas en mode test
          if (!testMode) {
            await this.saveTranslationToDatabase(toolId, langCode, translation);
            console.log(`üíæ Traduction ${langCode.toUpperCase()} sauvegard√©e en DB`);
          } else {
            console.log(
              `üß™ Mode test: Traduction ${langCode.toUpperCase()} non sauvegard√©e`
            );
          }
        } catch (error: any) {
          console.error(`‚ùå Erreur traduction ${langCode}: ${error.message}`);
          translations[langCode] = { error: error.message };
        }
      }

      return {
        toolId,
        translations,
        totalLanguages: languagesToTranslate.length,
        successfulTranslations: Object.keys(translations).filter(
          lang => !translations[lang].error
        ).length,
      };
    } catch (error: any) {
      console.error('‚ùå Erreur g√©n√©ration traductions:', error.message);
      throw error;
    }
  }

  /**
   * üîÑ TRADUCTION VERS UNE LANGUE SP√âCIFIQUE - MOTEUR CENTRAL OPTIMIS√â
   *
   * Cette fonction est le MOTEUR de traduction pour UNE langue.
   * Elle prend le contenu anglais et le traduit vers une langue cible
   * en utilisant UN SEUL prompt Gemini unifi√© pour les 7 champs.
   *
   * ‚ö° OPTIMISATION MAJEURE:
   * - AVANT: 7 appels API par langue (42 total pour 6 langues)
   * - APR√àS: 1 appel API par langue (6 total pour 6 langues)
   * - √âCONOMIE: 85% de r√©duction des appels API (42 ‚Üí 6)
   *
   * üéØ R√îLE CRITIQUE:
   * - Traduire les 7 champs vers UNE langue cible en un seul appel
   * - Respecter les contraintes sp√©cifiques de chaque champ
   * - Maintenir la coh√©rence terminologique (nom outil, etc.)
   * - Adapter le style √† la langue cible (fran√ßais soutenu, espagnol commercial, etc.)
   * - Retourner un JSON structur√© avec les 7 champs traduits
   *
   * üì• PARAM√àTRES:
   * @param tool - Objet Tool Prisma (pour r√©cup√©rer nom, cat√©gorie, etc.)
   * @param content - Contenu anglais source (7 champs valid√©s)
   * @param targetLang - Code langue ISO 639-1 (fr, it, es, de, nl, pt)
   *
   * üß† STRAT√âGIE DE TRADUCTION UNIFI√âE:
   *
   * 1Ô∏è‚É£ OVERVIEW (r√©sum√© outil):
   *    ‚Ä¢ Contrainte: EXACTEMENT 2 phrases (ni plus, ni moins)
   *    ‚Ä¢ Usage: Aper√ßu dans grilles d'outils sur le site
   *    ‚Ä¢ D√©fi: Condenser l'essence en 2 phrases naturelles
   *
   * 2Ô∏è‚É£ DESCRIPTION (article complet):
   *    ‚Ä¢ Contrainte: Markdown pr√©serv√© (##, -, etc.)
   *    ‚Ä¢ Usage: Page d√©tail de l'outil
   *    ‚Ä¢ D√©fi: Traduire sections techniques avec pr√©cision
   *
   * 3Ô∏è‚É£ META TITLE (SEO titre):
   *    ‚Ä¢ Contrainte: DOIT finir par " - Video-IA.net" (branding)
   *    ‚Ä¢ Contrainte: Maximum 70 caract√®res TOTAL
   *    ‚Ä¢ Usage: Titre Google, onglet navigateur
   *    ‚Ä¢ D√©fi: Optimiser SEO + branding + limites
   *
   * 4Ô∏è‚É£ META DESCRIPTION (SEO description):
   *    ‚Ä¢ Contrainte: Maximum 160 caract√®res
   *    ‚Ä¢ Contrainte: Call-to-action engageant
   *    ‚Ä¢ Usage: Snippet Google sous le titre
   *    ‚Ä¢ D√©fi: Convaincre clic en 160 chars max
   *
   * 5Ô∏è‚É£ KEY FEATURES (fonctionnalit√©s):
   *    ‚Ä¢ Contrainte: Format bullet points (‚Ä¢ ou -)
   *    ‚Ä¢ Contrainte: 3-6 items maximum
   *    ‚Ä¢ Usage: Section "Fonctionnalit√©s" page outil
   *    ‚Ä¢ D√©fi: Concision technique + attractivit√©
   *
   * 6Ô∏è‚É£ USE CASES (cas d'usage):
   *    ‚Ä¢ Contrainte: Chaque bullet DOIT commencer par nom outil
   *    ‚Ä¢ Format: "NomOutil helps you..." dans langue cible
   *    ‚Ä¢ Usage: Section "Cas d'usage" page outil
   *    ‚Ä¢ D√©fi: Coh√©rence nom + exemples concrets
   *
   * 7Ô∏è‚É£ TARGET AUDIENCE (public cible):
   *    ‚Ä¢ Contrainte: Paragraphe de 3-4 phrases
   *    ‚Ä¢ Style: Professionnel, sp√©cifique
   *    ‚Ä¢ Usage: Section "Pour qui" page outil
   *    ‚Ä¢ D√©fi: Segmentation pr√©cise + style naturel
   *
   * ‚ö° ARCHITECTURE PERFORMANCE:
   * - 7 appels Gemini simultan√©s (Promise.all)
   * - Dur√©e: ~10-15s par langue au lieu de 70s s√©quentiel
   * - Fallback automatique sur 5 mod√®les si √©chec
   * - Nettoyage imm√©diat apr√®s chaque r√©ponse
   *
   * üé® ADAPTATION CULTURELLE PAR LANGUE:
   * - Fran√ßais: Style soutenu, vouvoiement
   * - Espagnol: Style commercial, direct
   * - Italien: Style √©l√©gant, expressif
   * - Allemand: Style pr√©cis, technique
   * - N√©erlandais: Style pratique, concis
   * - Portugais: Style chaleureux, accessible
   *
   * üõ°Ô∏è GESTION D'ERREURS:
   * - Chaque prompt isol√© (un √©choue, les autres continuent)
   * - Retry automatique avec mod√®le diff√©rent
   * - Logs d√©taill√©s pour debugging
   * - R√©ponses partielles accept√©es (mieux que rien)
   *
   * üì§ RETOUR:
   * Objet avec 7 champs traduits nettoy√©s et valid√©s:
   * {
   *   overview: string,
   *   description: string,
   *   metaTitle: string,
   *   metaDescription: string,
   *   keyFeatures: string,
   *   useCases: string,
   *   targetAudience: string
   * }
   *
   * üí° EXEMPLE TRANSFORMATION:
   * EN: "AI 3D Rendering Tool - Visualizee - Video-IA.net"
   * FR: "Outil de Rendu 3D IA - Visualizee - Video-IA.net"
   * ES: "Herramienta de Renderizado 3D IA - Visualizee - Video-IA.net"
   * DE: "KI 3D-Rendering-Tool - Visualizee - Video-IA.net"
   */
  private static async generateSingleLanguageTranslation(
    tool: Tool,
    content: any,
    targetLang: string
  ): Promise<any> {
    const languageNames: { [key: string]: string } = {
      fr: 'French (Fran√ßais)',
      it: 'Italian (Italiano)',
      es: 'Spanish (Espa√±ol)',
      de: 'German (Deutsch)',
      nl: 'Dutch (Nederlands)',
      pt: 'Portuguese (Portugu√™s)',
    };

    const langName = languageNames[targetLang] || targetLang;

    /**
     * üöÄ PROMPT UNIFI√â - LES 7 CHAMPS EN 1 SEUL APPEL API
     *
     * ‚ö° R√âVOLUTION: Au lieu de 7 appels API par langue, UN SEUL appel
     * qui g√©n√®re les 7 champs simultan√©ment au format JSON structur√©.
     *
     * üéØ √âCONOMIE: 85% de r√©duction des appels (7 ‚Üí 1 par langue)
     *
     * üìã FORMAT DE R√âPONSE ATTENDU (JSON):
     * {
     *   "overview": "Exactly 2 sentences...",
     *   "description": "Full markdown article...",
     *   "metaTitle": "SEO title - Video-IA.net",
     *   "metaDescription": "Max 160 chars...",
     *   "keyFeatures": "‚Ä¢ Feature 1\n‚Ä¢ Feature 2...",
     *   "useCases": "‚Ä¢ ToolName helps...",
     *   "targetAudience": "3-4 sentences paragraph..."
     * }
     *
     * üîß CONTRAINTES CRITIQUES MAINTENUES:
     * - Overview: EXACTEMENT 2 phrases
     * - Meta Title: DOIT finir par " - Video-IA.net" + max 70 chars
     * - Meta Description: max 160 caract√®res
     * - Key Features: format bullet points
     * - Use Cases: chaque bullet commence par nom outil
     * - Target Audience: 3-4 phrases en paragraphe
     */

    const unifiedTranslationPrompt = `You are a professional translator for Video-IA.net. Translate the following AI tool content from English to ${langName}.

Tool: ${tool.toolName}
Category: ${tool.toolCategory || 'AI Tool'}

=== ORIGINAL ENGLISH CONTENT ===

Overview: ${content.overview}

Description: ${content.description}

Meta Title: ${content.metaTitle}

Meta Description: ${content.metaDescription}

Key Features: ${content.keyFeatures}

Use Cases: ${content.useCases}

Target Audience: ${content.targetAudience}

=== TRANSLATION INSTRUCTIONS ===

Translate ALL 7 fields above to ${langName} and return ONLY a valid JSON object with this exact structure:

{
  "overview": "EXACTLY 2 sentences. No more, no less.",
  "description": "Full translation maintaining markdown formatting (##, -, etc.)",
  "metaTitle": "Translation that MUST end with ' - Video-IA.net' and be maximum 70 characters",
  "metaDescription": "Translation maximum 160 characters with engaging call-to-action",
  "keyFeatures": "Bullet points with ‚Ä¢ or - format, 3-6 items maximum",
  "useCases": "Bullet points where each starts with '${tool.toolName} helps...' or equivalent in ${langName}",
  "targetAudience": "3-4 sentences paragraph (no bullets), professional tone"
}

CRITICAL REQUIREMENTS:
1. Return ONLY the JSON object, no other text
2. Keep tool name "${tool.toolName}" unchanged in all fields
3. Overview: exactly 2 sentences (use . ! ? as sentence separators)
4. Meta Title: must end with " - Video-IA.net" and be ‚â§70 chars total
5. Meta Description: ‚â§160 characters
6. Use natural, professional ${langName}
7. Maintain technical accuracy

Return the JSON now:`;

    /**
     * üöÄ APPEL UNIQUE API - R√âVOLUTION D'EFFICACIT√â
     *
     * Au lieu de 7 appels s√©par√©s, UN SEUL appel g√©n√®re tout.
     * Le prompt unifi√© ci-dessus contient toutes les instructions
     * n√©cessaires pour traduire les 7 champs simultan√©ment.
     */
    console.log(
      `üîÑ Appel API unifi√© pour ${langName.toUpperCase()} (1 appel au lieu de 7)`
    );

    const jsonResponse = await this.callGeminiWithFallback(unifiedTranslationPrompt);

    /**
     * üì• PARSING ET VALIDATION DE LA R√âPONSE JSON
     *
     * La r√©ponse devrait √™tre un JSON valide avec les 7 champs.
     * On applique un parsing robuste avec fallback en cas d'erreur.
     */
    let parsedTranslation: any;
    try {
      // üßπ NETTOYAGE ROBUSTE DE LA R√âPONSE
      let cleanJson = jsonResponse.trim();

      console.log(
        `üîç R√©ponse brute re√ßue (${cleanJson.length} chars):`,
        cleanJson.substring(0, 200) + '...'
      );

      // Supprimer les pr√©fixes courants que Gemini peut ajouter
      const prefixes = [
        'Here is the JSON:',
        "Here's the JSON:",
        `${langName} translation:`,
        'JSON:',
        '```json',
        '```',
      ];

      for (const prefix of prefixes) {
        if (cleanJson.startsWith(prefix)) {
          const beforeClean = cleanJson;
          cleanJson = cleanJson.substring(prefix.length).trim();
          console.log(
            `üßπ Pr√©fixe supprim√©: "${prefix}" ‚Üí ${beforeClean.length} ‚Üí ${cleanJson.length} chars`
          );
        }
        if (cleanJson.endsWith('```')) {
          const beforeClean = cleanJson;
          cleanJson = cleanJson.substring(0, cleanJson.length - 3).trim();
          console.log(
            `üßπ Suffixe supprim√©: "''' ‚Üí ${beforeClean.length} ‚Üí ${cleanJson.length} chars`
          );
        }
      }

      console.log(
        `üîç JSON nettoy√© (${cleanJson.length} chars):`,
        cleanJson.substring(0, 200) + '...'
      );

      // üö® VALIDATION FINALE AVANT PARSING
      if (!cleanJson || cleanJson.length < 10) {
        throw new Error('JSON trop court apr√®s nettoyage');
      }

      if (!cleanJson.startsWith('{') || !cleanJson.includes('}')) {
        throw new Error('Format JSON invalide - doit commencer par { et contenir }');
      }

      // üîç PARSING JSON AVEC VALIDATION
      parsedTranslation = JSON.parse(cleanJson);

      // ‚úÖ VALIDATION DE LA STRUCTURE PARS√âE
      const requiredFields = [
        'overview',
        'description',
        'metaTitle',
        'metaDescription',
        'keyFeatures',
        'useCases',
        'targetAudience',
      ];
      const missingFields = requiredFields.filter(field => !parsedTranslation[field]);

      if (missingFields.length > 0) {
        console.log(`‚ö†Ô∏è  Champs manquants dans le JSON: ${missingFields.join(', ')}`);
        // Remplir les champs manquants avec des valeurs par d√©faut
        missingFields.forEach(field => {
          parsedTranslation[field] =
            `Translation error for ${tool.toolName} - field: ${field}`;
        });
      }

      console.log(`‚úÖ JSON pars√© avec succ√®s pour ${langName.toUpperCase()}`);
      console.log(`üìä Champs d√©tect√©s: ${Object.keys(parsedTranslation).join(', ')}`);
    } catch (error: any) {
      console.error(`‚ùå Erreur parsing JSON pour ${langName}:`, error.message);
      console.log(`üìÑ R√©ponse brute compl√®te:`, jsonResponse);
      console.log(`üîç Tentative de nettoyage √©chou√©e`);

      // üõ†Ô∏è FALLBACK INTELLIGENT - Essayer d'extraire des informations partielles
      console.log(`üîÑ Tentative d'extraction partielle...`);

      try {
        // Essayer de trouver des patterns dans la r√©ponse brute
        const extractedData = this.extractPartialTranslation(
          jsonResponse,
          tool.toolName,
          langName
        );
        parsedTranslation = extractedData;
        console.log(`‚úÖ Extraction partielle r√©ussie pour ${langName.toUpperCase()}`);
      } catch (extractError: any) {
        console.log(`‚ùå Extraction partielle √©chou√©e: ${extractError.message}`);

        // üö® FALLBACK FINAL - Structure d'erreur
        parsedTranslation = {
          overview: `Translation error for ${tool.toolName}. Please contact support.`,
          description: `Translation error for ${tool.toolName}. Please contact support.`,
          metaTitle: `${tool.toolName} - Video-IA.net`,
          metaDescription: `Translation error for ${tool.toolName}.`,
          keyFeatures: `‚Ä¢ Translation error for ${tool.toolName}`,
          useCases: `‚Ä¢ ${tool.toolName} translation error`,
          targetAudience: `Translation error for ${tool.toolName}. Please contact support.`,
        };
      }
    }

    /**
     * üßπ VALIDATION ET NETTOYAGE POST-PARSING
     *
     * M√™me avec le JSON, on applique les validations critiques
     * pour s'assurer de la conformit√© aux contraintes.
     */
    const validatedTranslation = {
      overview: this.cleanTranslationResponse(
        parsedTranslation.overview || '',
        'overview'
      ),
      description: this.cleanTranslationResponse(
        parsedTranslation.description || '',
        'description'
      ),
      metaTitle: this.cleanTranslationResponse(
        parsedTranslation.metaTitle || '',
        'metaTitle'
      ),
      metaDescription: this.cleanTranslationResponse(
        parsedTranslation.metaDescription || '',
        'metaDescription'
      ),
      keyFeatures: this.cleanTranslationResponse(
        parsedTranslation.keyFeatures || '',
        'keyFeatures'
      ),
      useCases: this.cleanTranslationResponse(
        parsedTranslation.useCases || '',
        'useCases'
      ),
      targetAudience: this.cleanTranslationResponse(
        parsedTranslation.targetAudience || '',
        'targetAudience'
      ),
    };

    console.log(
      `üéâ Traduction ${langName.toUpperCase()} termin√©e avec 1 seul appel API`
    );
    return validatedTranslation;
  }

  /**
   * üõ†Ô∏è EXTRACTION PARTIELLE DE TRADUCTION - FALLBACK INTELLIGENT
   *
   * Cette fonction tente d'extraire des informations partielles d'une r√©ponse
   * Gemini malform√©e pour √©viter une perte compl√®te de contenu.
   *
   * üéØ R√îLE:
   * - Analyser la r√©ponse brute pour trouver des patterns de traduction
   * - Extraire les champs disponibles m√™me si le JSON est cass√©
   * - Fournir une structure partielle plut√¥t qu'une erreur compl√®te
   *
   * üì• PARAM√àTRES:
   * @param rawResponse - R√©ponse brute de Gemini (potentiellement malform√©e)
   * @param toolName - Nom de l'outil pour les messages d'erreur
   * @param langName - Nom de la langue pour le contexte
   *
   * üì§ RETOUR:
   * Objet avec les champs extraits ou des valeurs par d√©faut
   */
  private static extractPartialTranslation(
    rawResponse: any,
    toolName: string,
    langName: string
  ): any {
    try {
      // Convertir en string si ce n'est pas d√©j√† le cas
      const responseStr =
        typeof rawResponse === 'string' ? rawResponse : String(rawResponse);

      console.log(`üîç Tentative d'extraction partielle pour ${langName.toUpperCase()}`);
      console.log(`üìÑ R√©ponse brute: ${responseStr.substring(0, 300)}...`);

      const extractedData: any = {};

      // üîç PATTERNS DE RECHERCHE POUR CHAQUE CHAMP
      const patterns = {
        overview: [
          /overview["\s]*:["\s]*([^"]+)/i,
          /overview["\s]*:["\s]*([^}]+?)(?=,|})/i,
        ],
        description: [
          /description["\s]*:["\s]*([^"]+)/i,
          /description["\s]*:["\s]*([^}]+?)(?=,|})/i,
        ],
        metaTitle: [
          /metaTitle["\s]*:["\s]*([^"]+)/i,
          /metaTitle["\s]*:["\s]*([^}]+?)(?=,|})/i,
        ],
        metaDescription: [
          /metaDescription["\s]*:["\s]*([^"]+)/i,
          /metaDescription["\s]*:["\s]*([^}]+?)(?=,|})/i,
        ],
        keyFeatures: [
          /keyFeatures["\s]*:["\s]*([^"]+)/i,
          /keyFeatures["\s]*:["\s]*([^}]+?)(?=,|})/i,
        ],
        useCases: [
          /useCases["\s]*:["\s]*([^"]+)/i,
          /useCases["\s]*:["\s]*([^}]+?)(?=,|})/i,
        ],
        targetAudience: [
          /targetAudience["\s]*:["\s]*([^"]+)/i,
          /targetAudience["\s]*:["\s]*([^}]+?)(?=,|})/i,
        ],
      };

      // üîç EXTRACTION AVEC PATTERNS
      for (const [field, fieldPatterns] of Object.entries(patterns)) {
        let extracted = false;

        for (const pattern of fieldPatterns) {
          const match = responseStr.match(pattern);
          if (match && match[1]) {
            let value = match[1].trim();

            // Nettoyer la valeur extraite
            value = value.replace(/^["\s]+/, '').replace(/["\s]+$/, '');

            if (value && value.length > 5) {
              extractedData[field] = value;
              extracted = true;
              console.log(`‚úÖ ${field} extrait: "${value.substring(0, 50)}..."`);
              break;
            }
          }
        }

        if (!extracted) {
          // Valeur par d√©faut si extraction √©chou√©e
          extractedData[field] = `Extraction failed for ${field} - ${toolName}`;
          console.log(`‚ùå ${field}: extraction √©chou√©e, valeur par d√©faut utilis√©e`);
        }
      }

      // üö® VALIDATION FINALE
      const extractedFields = Object.keys(extractedData).length;
      console.log(`üìä Extraction partielle: ${extractedFields}/7 champs extraits`);

      if (extractedFields === 0) {
        throw new Error('Aucun champ extrait de la r√©ponse brute');
      }

      return extractedData;
    } catch (error: any) {
      console.log(`‚ùå Extraction partielle √©chou√©e: ${error.message}`);
      throw error;
    }
  }

  /**
   * üßπ NETTOYAGE INTELLIGENT DES R√âPONSES IA - POST-PROCESSING CRUCIAL
   *
   * Cette fonction est CRITIQUE car les r√©ponses Gemini arrivent souvent "sales"
   * avec des pr√©fixes, guillemets et formats inconsistants qu'il faut nettoyer.
   *
   * üéØ R√îLES MULTIPLES:
   * 1. Suppression pr√©fixes courants ("French translation:", etc.)
   * 2. Suppression guillemets parasites en d√©but/fin
   * 3. Validation sp√©cifique par type de champ
   * 4. Application contraintes techniques (longueur, format)
   * 5. Correction automatique si possible
   *
   * üì• PARAM√àTRES:
   * @param response - R√©ponse brute de Gemini (peut contenir parasites)
   * @param fieldType - Type de champ pour validation sp√©cifique:
   *   ‚Ä¢ 'overview' - v√©rification 2 phrases
   *   ‚Ä¢ 'metaTitle' - validation "- Video-IA.net" + limite 70 chars
   *   ‚Ä¢ 'metaDescription' - limite 160 caract√®res
   *   ‚Ä¢ autres - nettoyage de base
   *
   * üîß NETTOYAGES APPLIQU√âS:
   *
   * √âTAPE 1 - Suppression pr√©fixes multilangues:
   * - "French translation:", "Traduction fran√ßaise:"
   * - "Italian translation:", "Traduzione italiana:"
   * - "Spanish translation:", "Traducci√≥n espa√±ola:"
   * - "German translation:", "Deutsche √úbersetzung:"
   * - "Dutch translation:", "Nederlandse vertaling:"
   * - "Portuguese translation:", "Tradu√ß√£o portuguesa:"
   *
   * √âTAPE 2 - Suppression guillemets:
   * - D√©but et fin de cha√Æne uniquement
   * - Pr√©servation des guillemets internes
   *
   * √âTAPE 3 - Validations sp√©cifiques:
   *
   * metaTitle:
   * - Ajout forc√© "- Video-IA.net" si manquant (branding obligatoire)
   * - Troncature intelligente √† 70 chars (garde le suffixe)
   * - Calcul: 70 - 15 (Video-IA.net) = 55 chars max pour titre
   *
   * metaDescription:
   * - Troncature √† 160 chars avec "..." si trop long
   * - Pr√©servation du call-to-action si possible
   *
   * √âTAPE 4 - Trim final et retour nettoy√©
   *
   * üö® CAS CRITIQUES G√âR√âS:
   * - R√©ponse vide ou null ‚Üí retour cha√Æne vide
   * - Meta title sans Video-IA.net ‚Üí ajout forc√©
   * - Meta title trop long ‚Üí troncature intelligente
   * - Meta description trop longue ‚Üí troncature avec "..."
   *
   * üí° EXEMPLES TRANSFORMATIONS:
   *
   * AVANT: "French translation: \"Outil de Rendu 3D IA\""
   * APR√àS: "Outil de Rendu 3D IA - Video-IA.net"
   *
   * AVANT: "\"Cette description est beaucoup trop longue pour tenir dans les 160 caract√®res maximum autoris√©s par Google pour les meta descriptions SEO\""
   * APR√àS: "Cette description est beaucoup trop longue pour tenir dans les 160 caract√®res maximum autoris√©s par Google pour les meta desc..."
   *
   * üéØ VALEUR:
   * Cette fonction transforme des r√©ponses IA brutes et inconsistantes
   * en contenu propre, valid√© et conforme aux contraintes techniques
   * de Video-IA.net et des standards SEO.
   */
  private static cleanTranslationResponse(response: any, fieldType: string): string {
    // üõ°Ô∏è VALIDATION ROBUSTE DU TYPE DE R√âPONSE
    if (!response) return '';

    // üîÑ CONVERSION FORC√âE EN STRING
    let responseString: string;

    if (typeof response === 'string') {
      responseString = response;
    } else if (typeof response === 'number') {
      responseString = response.toString();
    } else if (typeof response === 'boolean') {
      responseString = response.toString();
    } else if (response && typeof response === 'object') {
      // Si c'est un objet, essayer de le convertir en JSON
      try {
        responseString = JSON.stringify(response);
      } catch {
        responseString = String(response);
      }
    } else {
      // Fallback pour tout autre type
      responseString = String(response);
    }

    // üßπ NETTOYAGE DES PR√âFIXES COURANTS
    let cleaned = responseString
      .replace(
        /^(French|Italian|Spanish|German|Dutch|Portuguese)?\s*(translation|traduction)?:?\s*/i,
        ''
      )
      .replace(
        /^(Traduction|Translation)\s*(en\s*)?(fran√ßais|french|italiano|italian|espa√±ol|spanish|deutsch|german|nederlands|dutch|portugu√™s|portuguese)?:?\s*/i,
        ''
      )
      .trim();

    // üóëÔ∏è SUPPRESSION DES GUILLEMETS EN D√âBUT/FIN
    if (cleaned.startsWith('"') && cleaned.endsWith('"')) {
      cleaned = cleaned.slice(1, -1);
    }

    // üîç VALIDATION SP√âCIFIQUE PAR TYPE DE CHAMP
    switch (fieldType) {
      case 'metaTitle':
        // V√©rifier que √ßa finit par "- Video-IA.net"
        if (!cleaned.includes('- Video-IA.net')) {
          cleaned = cleaned.replace(/\s*$/, ' - Video-IA.net');
        }
        // Limiter √† 70 caract√®res
        if (cleaned.length > 70) {
          const beforeSuffix = cleaned.replace(' - Video-IA.net', '');
          const maxLength = 70 - ' - Video-IA.net'.length;
          cleaned = beforeSuffix.substring(0, maxLength).trim() + ' - Video-IA.net';
        }
        break;

      case 'metaDescription':
        // Limiter √† 160 caract√®res
        if (cleaned.length > 160) {
          cleaned = cleaned.substring(0, 157) + '...';
        }
        break;
    }

    return cleaned;
  }

  /**
   * üíæ SAUVEGARDE TRADUCTION EN BASE - PERSISTANCE CRITIQUE
   *
   * Cette fonction sauvegarde les traductions nettoy√©es dans la table
   * tool_translations via Prisma ORM avec gestion intelligente des conflits.
   *
   * üéØ R√îLE ESSENTIEL:
   * - Persistance des traductions dans PostgreSQL
   * - Gestion cr√©ation/mise √† jour (upsert)
   * - Mapping champs avec contraintes DB
   * - Tra√ßabilit√© et scoring automatique
   *
   * üì• PARAM√àTRES:
   * @param toolId - ID de l'outil (cl√© √©trang√®re vers table tools)
   * @param languageCode - Code ISO 639-1 (fr, it, es, de, nl, pt)
   * @param translation - Objet avec 7 champs traduits nettoy√©s
   *
   * üóÑÔ∏è SCH√âMA DATABASE (table tool_translations):
   * - id: Primary key auto-increment
   * - tool_id: Foreign key vers tools.id
   * - language_code: Code langue (fr, it, es, de, nl, pt)
   * - name: Nom traduit (extrait overview, phrase 1)
   * - overview: R√©sum√© 2 phrases traduit
   * - description: Article complet traduit
   * - meta_title: Titre SEO traduit avec "- Video-IA.net"
   * - meta_description: Description SEO traduite
   * - translation_source: 'ai_generated' (tra√ßabilit√©)
   * - quality_score: 8.5/10 (score par d√©faut traductions IA)
   * - created_at/updated_at: Timestamps automatiques
   *
   * üîë CL√â COMPOSITE UNIQUE:
   * (tool_id, language_code) - Assure 1 traduction par langue par outil
   *
   * üîÑ STRAT√âGIE UPSERT:
   * - WHERE: Cherche combinaison (toolId, languageCode)
   * - Si EXISTE: UPDATE avec nouveaux contenus + updated_at
   * - Si N'EXISTE PAS: CREATE avec tous les champs
   *
   * üìä M√âTADONN√âES AUTOMATIQUES:
   * - translation_source: 'ai_generated' (vs 'human', 'imported')
   * - quality_score: 8.5 (traductions IA = bonne qualit√© par d√©faut)
   * - created_at: Timestamp cr√©ation automatique
   * - updated_at: Timestamp mise √† jour automatique
   *
   * üßÆ EXTRACTION NAME:
   * Le champ 'name' est extrait de l'overview (premi√®re phrase)
   * car c'est le nom affich√© dans les listes et grilles.
   * Fallback: "Tool {toolId}" si overview manquant.
   *
   * üõ°Ô∏è GESTION D'ERREURS:
   * - Try/catch sur l'upsert
   * - Log d√©taill√© en cas d'erreur
   * - Throw error pour remont√©e au niveau sup√©rieur
   * - Pas de rollback (chaque langue ind√©pendante)
   *
   * üîç CAS D'USAGE:
   * - Mode test: Fonction pas appel√©e (testMode=true)
   * - Mode production: Appel√©e apr√®s chaque traduction r√©ussie
   * - Batch: Appel√©e pour chaque outil √ó chaque langue
   *
   * üí° EXEMPLE SQL G√âN√âR√â:
   * INSERT INTO tool_translations (tool_id, language_code, name, overview, ...)
   * VALUES (6669, 'fr', 'Visualizee est un outil...', ...)
   * ON CONFLICT (tool_id, language_code)
   * DO UPDATE SET overview = EXCLUDED.overview, updated_at = NOW()
   *
   * üåç IMPACT INTERNATIONAL:
   * Cette fonction permet √† Video-IA.net de servir du contenu
   * dans 7 langues avec tra√ßabilit√© compl√®te et qualit√© mesur√©e.
   */
  private static async saveTranslationToDatabase(
    toolId: number,
    languageCode: string,
    translation: any
  ): Promise<void> {
    try {
      await prisma.toolTranslation.upsert({
        where: {
          toolId_languageCode: {
            toolId,
            languageCode,
          },
        },
        update: {
          name: translation.overview
            ? translation.overview.split('.')[0] + '.'
            : undefined,
          overview: translation.overview,
          description: translation.description,
          metaTitle: translation.metaTitle,
          metaDescription: translation.metaDescription,
          keyFeatures: translation.keyFeatures,
          useCases: translation.useCases,
          targetAudience: translation.targetAudience,
          translationSource: languageCode === 'en' ? 'imported' : 'ai_generated',
          quality_score: languageCode === 'en' ? 9.5 : 8.5,
          updatedAt: new Date(),
        },
        create: {
          toolId,
          languageCode,
          name: translation.overview
            ? translation.overview.split('.')[0] + '.'
            : `Tool ${toolId}`,
          overview: translation.overview,
          description: translation.description,
          metaTitle: translation.metaTitle,
          metaDescription: translation.metaDescription,
          keyFeatures: translation.keyFeatures,
          useCases: translation.useCases,
          targetAudience: translation.targetAudience,
          translationSource: languageCode === 'en' ? 'imported' : 'ai_generated',
          quality_score: languageCode === 'en' ? 9.5 : 8.5,
        },
      });
    } catch (error: any) {
      console.error(`‚ùå Erreur sauvegarde traduction ${languageCode}:`, error.message);
      throw error;
    }
  }

  /**
   * Overview de fallback si Gemini √©choue
   */
  private static generateFallbackOverview(tool: Tool): string {
    return `${tool.toolName} is an innovative AI tool designed for ${tool.toolCategory?.toLowerCase() || 'various tasks'}. It provides automated solutions to streamline workflows and enhance productivity.`;
  }

  /**
   * Key features de fallback si Gemini √©choue
   */
  private static generateFallbackKeyFeatures(tool: Tool): string {
    return `‚Ä¢ Automate complex ${tool.toolCategory?.toLowerCase() || 'digital'} tasks
‚Ä¢ Streamline workflow processes
‚Ä¢ Provide intelligent solutions`;
  }

  /**
   * Meta de fallback si Gemini √©choue
   */
  private static generateFallbackMeta(tool: Tool): {
    metaTitle: string;
    metaDescription: string;
  } {
    return {
      metaTitle:
        `${tool.toolName} - ${tool.toolCategory || 'AI Tool'} - Video-IA.net`.substring(
          0,
          70
        ),
      metaDescription:
        `Discover ${tool.toolName}, a powerful ${tool.toolCategory?.toLowerCase() || 'AI'} tool. Learn features, use cases and get started today!`.substring(
          0,
          160
        ),
    };
  }

  /**
   * Contenu de fallback si Gemini √©choue
   */
  private static generateFallbackContent(tool: Tool): string {
    return `## What's ${tool.toolName}?

${tool.toolName} est un outil IA innovant qui transforme la fa√ßon dont nous abordons ${tool.toolCategory?.toLowerCase() || 'les t√¢ches num√©riques'}. Cet outil se distingue par sa capacit√© √† automatiser des processus complexes tout en maintenant une interface utilisateur intuitive et accessible.

## Principales fonctionnalit√©s

L'un des atouts majeurs de ${tool.toolName} r√©side dans ses fonctionnalit√©s avanc√©es qui permettent aux utilisateurs de gagner un temps consid√©rable. L'outil propose une gamme compl√®te d'options personnalisables qui s'adaptent aux besoins sp√©cifiques de chaque utilisateur, qu'il soit d√©butant ou expert.

## Pourquoi choisir ${tool.toolName}?

Ce qui rend ${tool.toolName} particuli√®rement attrayant, c'est sa capacit√© √† simplifier des t√¢ches qui prendraient normalement des heures de travail manuel. Les utilisateurs appr√©cient particuli√®rement sa facilit√© d'int√©gration avec d'autres outils existants et sa courbe d'apprentissage relativement douce.

## Points d'attention

Cependant, comme tout outil, ${tool.toolName} pr√©sente certaines limitations qu'il convient de mentionner. L'outil peut parfois manquer de flexibilit√© pour des cas d'usage tr√®s sp√©cifiques, et ses fonctionnalit√©s avanc√©es n√©cessitent parfois une p√©riode d'adaptation pour √™tre pleinement ma√Ætris√©es.

## Verdict final

En conclusion, ${tool.toolName} repr√©sente un excellent choix pour quiconque cherche √† optimiser son workflow dans le domaine de ${tool.toolCategory?.toLowerCase() || 'la technologie'}. Malgr√© quelques limitations mineures, ses avantages l'emportent largement sur ses inconv√©nients, en faisant un investissement judicieux pour am√©liorer sa productivit√©.`;
  }

  /**
   * Nettoyer le dossier temporaire
   */
  static async cleanupTempDirectory(tempDirPath: string): Promise<void> {
    try {
      await fs.rm(tempDirPath, { recursive: true, force: true });
    } catch (error) {
      console.error(`Erreur lors du nettoyage de ${tempDirPath}:`, error);
    }
  }

  /**
   * Processus complet de mise √† jour d'un outil
   */
  static async updateToolContent(
    toolId: number,
    testMode: boolean = true
  ): Promise<ToolUpdateResult> {
    const result: ToolUpdateResult = {
      toolId,
      toolName: '',
      status: 'failed',
      step: 'http_check',
      errors: [],
    };

    try {
      // R√©cup√©rer l'outil
      const tool = await prisma.tool.findUnique({
        where: { id: toolId },
      });

      if (!tool || !tool.toolLink) {
        result.errors?.push('Outil non trouv√© ou URL manquante');
        return result;
      }

      result.toolName = tool.toolName;

      // √âtape 1 : V√©rification HTTP
      console.log(`üîç √âtape 1: Test HTTP pour ${tool.toolName}...`);
      const httpResult = await this.checkHttpStatus(tool);
      result.httpStatusCode = httpResult.httpStatusCode;
      result.isActive = httpResult.isActive;

      if (!httpResult.isActive) {
        result.status = 'inactive';
        result.step = 'http_check';
        return result;
      }

      // √âtape 1.5 : Screenshot
      result.step = 'screenshot';
      console.log(`üì∏ √âtape 1.5: Capture d'√©cran pour ${tool.toolName}...`);
      const screenshotPath = await this.captureScreenshot(tool);
      result.screenshotPath = screenshotPath;

      if (screenshotPath) {
        if (!testMode) {
          console.log(`üìä Mise √† jour DB: Screenshot sauvegard√©`);
          const updatedTool = await prisma.tool.update({
            where: { id: toolId },
            data: {
              imageUrl: screenshotPath,
              updatedAt: new Date(),
            },
          });
          console.log(
            `‚úÖ DB mise √† jour confirm√©e via Prisma - imageUrl sauvegard√© pour Tool ID: ${updatedTool.id}`
          );
          console.log(`üì∏ Chemin relatif en DB: ${screenshotPath}`);
        } else {
          console.log(`üß™ Mode test: Screenshot cr√©√© mais non sauvegard√© en DB`);
          console.log(`üì∏ Screenshot cr√©√©: ${screenshotPath}`);
        }
      } else {
        console.log(`‚ùå √âchec capture screenshot - imageUrl non mis √† jour`);
      }

      // √âtape 2 : Crawling
      result.step = 'crawling';
      console.log(`üï∑Ô∏è √âtape 2: Crawling des pages pour ${tool.toolName}...`);
      const crawlResult = await this.crawlToolPages(tool);
      result.processedPages = crawlResult.crawledPages.length;

      // √âtape 3 : Extraction r√©seaux sociaux
      result.step = 'social_extraction';
      console.log(`üåê √âtape 3: Extraction des r√©seaux sociaux...`);
      const socialLinks = await this.extractSocialLinks(crawlResult.crawledPages, tool);
      result.socialLinks = socialLinks;

      if (!testMode) {
        console.log(
          `üìä Mise √† jour DB: ${Object.keys(socialLinks).length} liens sociaux`
        );
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            ...socialLinks,
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Liens sociaux sauvegard√©s pour Tool ID: ${updatedTool.id}`
        );
      } else {
        console.log(`üß™ Mode test: Liens sociaux non sauvegard√©s en DB`);
      }

      // √âtape 4 : Extraction liens utiles
      result.step = 'useful_links';
      console.log(`üîó √âtape 4: Extraction des liens utiles...`);
      const usefulLinks = await this.extractUsefulLinks(crawlResult.crawledPages, tool);
      result.usefulLinks = usefulLinks;

      if (!testMode) {
        console.log(
          `üìä Mise √† jour DB: ${Object.keys(usefulLinks).length} liens utiles`
        );
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            ...usefulLinks,
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Liens utiles sauvegard√©s pour Tool ID: ${updatedTool.id}`
        );
      } else {
        console.log(`üß™ Mode test: Liens utiles non sauvegard√©s en DB`);
      }

      // √âtape 5 : G√©n√©ration de contenu
      result.step = 'content_generation';
      console.log(`‚úçÔ∏è √âtape 5: G√©n√©ration de contenu...`);
      const generatedContent = await this.generateToolContent(
        tool,
        crawlResult.crawledPages
      );
      result.generatedContent = generatedContent;

      if (!testMode) {
        console.log(
          `üìä Mise √† jour DB: Description g√©n√©r√©e (${generatedContent.length} caract√®res)`
        );
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            toolDescription: generatedContent,
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Description sauvegard√©e pour Tool ID: ${updatedTool.id}`
        );
        console.log(`üìù Contenu: ${generatedContent.substring(0, 100)}...`);
      } else {
        console.log(`üß™ Mode test: Description g√©n√©r√©e non sauvegard√©e en DB`);
        console.log(`üìù Aper√ßu contenu: ${generatedContent.substring(0, 100)}...`);
      }

      // √âtape 6 : G√©n√©ration de l'overview
      result.step = 'overview_generation';
      console.log(`üìù √âtape 6: G√©n√©ration de l'overview...`);
      const generatedOverview = await this.generateToolOverview(
        tool,
        crawlResult.crawledPages
      );
      result.generatedOverview = generatedOverview;

      if (!testMode) {
        console.log(
          `üìä Mise √† jour DB: Overview g√©n√©r√© (${generatedOverview.length} caract√®res)`
        );
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            overview: generatedOverview,
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Overview sauvegard√© pour Tool ID: ${updatedTool.id}`
        );
      } else {
        console.log(`üß™ Mode test: Overview non sauvegard√© en DB`);
        console.log(`üìù Aper√ßu overview: ${generatedOverview}`);
      }

      // √âtape 7 : G√©n√©ration des key features
      result.step = 'keyfeatures_generation';
      console.log(`üîë √âtape 7: G√©n√©ration des key features...`);
      const generatedKeyFeatures = await this.generateToolKeyFeatures(
        tool,
        crawlResult.crawledPages
      );
      result.generatedKeyFeatures = generatedKeyFeatures;

      if (!testMode) {
        console.log(`üìä Mise √† jour DB: Key features g√©n√©r√©es`);
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            keyFeatures: generatedKeyFeatures,
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Key features sauvegard√©es pour Tool ID: ${updatedTool.id}`
        );
      } else {
        console.log(`üß™ Mode test: Key features non sauvegard√©es en DB`);
        console.log(
          `üìù Aper√ßu key features: ${generatedKeyFeatures.substring(0, 150)}...`
        );
      }

      // √âtape 8 : G√©n√©ration des meta title et description
      result.step = 'meta_generation';
      console.log(`üè∑Ô∏è √âtape 8: G√©n√©ration des meta title et description...`);
      const generatedMeta = await this.generateToolMeta(tool, crawlResult.crawledPages);
      result.generatedMetaTitle = generatedMeta.metaTitle;
      result.generatedMetaDescription = generatedMeta.metaDescription;

      if (!testMode) {
        console.log(`üìä Mise √† jour DB: Meta title et description g√©n√©r√©s`);
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            metaTitle: generatedMeta.metaTitle,
            metaDescription: generatedMeta.metaDescription,
            updatedAt: new Date(),
            last_optimized_at: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Meta donn√©es sauvegard√©es pour Tool ID: ${updatedTool.id}`
        );
        console.log(`üìù Meta Title: ${generatedMeta.metaTitle}`);
        console.log(`üìù Meta Description: ${generatedMeta.metaDescription}`);
      } else {
        console.log(`üß™ Mode test: Meta donn√©es non sauvegard√©es en DB`);
        console.log(`üìù Meta Title: ${generatedMeta.metaTitle}`);
        console.log(`üìù Meta Description: ${generatedMeta.metaDescription}`);
      }

      // √âtape 9 : G√©n√©ration du pricing model
      result.step = 'pricing_generation';
      console.log(`üí∞ √âtape 9: G√©n√©ration du pricing model...`);
      const generatedPricing = await this.generateToolPricingModel(
        tool,
        crawlResult.crawledPages
      );
      result.generatedPricingModel = generatedPricing;

      if (!testMode) {
        console.log(`üìä Mise √† jour DB: Pricing model g√©n√©r√© (${generatedPricing})`);
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            pricingModel: generatedPricing as any,
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Pricing model sauvegard√© pour Tool ID: ${updatedTool.id}`
        );
        console.log(`üí∞ Pricing Model: ${generatedPricing}`);
      } else {
        console.log(`üß™ Mode test: Pricing model non sauvegard√© en DB`);
        console.log(`üí∞ Pricing Model: ${generatedPricing}`);
      }

      // √âtape 10 : G√©n√©ration des use cases
      result.step = 'usecases_generation';
      console.log(`üéØ √âtape 10: G√©n√©ration des use cases...`);
      const generatedUseCases = await this.generateToolUseCases(
        tool,
        crawlResult.crawledPages
      );
      result.generatedUseCases = generatedUseCases;

      if (!testMode) {
        console.log(`üìä Mise √† jour DB: Use cases g√©n√©r√©s`);
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            useCases: generatedUseCases,
            updatedAt: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Use cases sauvegard√©s pour Tool ID: ${updatedTool.id}`
        );
      } else {
        console.log(`üß™ Mode test: Use cases non sauvegard√©s en DB`);
        console.log(`üéØ Aper√ßu use cases: ${generatedUseCases.substring(0, 150)}...`);
      }

      // √âtape 11 : G√©n√©ration du target audience
      result.step = 'targetaudience_generation';
      console.log(`üë• √âtape 11: G√©n√©ration du target audience...`);
      const generatedTargetAudience = await this.generateToolTargetAudience(
        tool,
        crawlResult.crawledPages
      );
      result.generatedTargetAudience = generatedTargetAudience;

      if (!testMode) {
        console.log(`üìä Mise √† jour DB: Target audience g√©n√©r√©`);
        const updatedTool = await prisma.tool.update({
          where: { id: toolId },
          data: {
            targetAudience: generatedTargetAudience,
            updatedAt: new Date(),
            last_optimized_at: new Date(),
          },
        });
        console.log(
          `‚úÖ DB mise √† jour confirm√©e via Prisma - Target audience sauvegard√© pour Tool ID: ${updatedTool.id}`
        );
        console.log(
          `üë• Target Audience: ${generatedTargetAudience.substring(0, 100)}...`
        );
      } else {
        console.log(`üß™ Mode test: Target audience non sauvegard√© en DB`);
        console.log(
          `üë• Aper√ßu target audience: ${generatedTargetAudience.substring(0, 150)}...`
        );
      }

      // Nettoyage
      await this.cleanupTempDirectory(crawlResult.tempDirPath);

      result.status = 'success';
      result.step = 'completed';
      console.log(
        `‚úÖ Mise √† jour compl√®te pour ${tool.toolName} - 11 √©tapes termin√©es`
      );

      return result;
    } catch (error: any) {
      result.errors?.push(error.message || 'Erreur inconnue');
      console.error(`‚ùå Erreur lors de la mise √† jour de l'outil ${toolId}:`, error);
      return result;
    }
  }

  /**
   * Traiter plusieurs outils en batch
   */
  static async updateMultipleTools(
    toolIds: number[],
    testMode: boolean = true
  ): Promise<ToolUpdateResult[]> {
    const results: ToolUpdateResult[] = [];

    for (const toolId of toolIds) {
      console.log(`\nüöÄ Traitement de l'outil ${toolId}...`);
      const result = await this.updateToolContent(toolId, testMode);
      results.push(result);

      // Pause entre les outils pour √©viter la surcharge
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    return results;
  }

  /**
   * ================================================================
   * üöÄ PROCESSUS COMPLET MULTILANGUE - FONCTION MA√éTRE
   * ================================================================
   *
   * Cette fonction est la FONCTION MA√éTRE qui orchestre tout le processus
   * de g√©n√©ration de contenu multilingue pour un outil Video-IA.net.
   *
   * üåü VALEUR STRAT√âGIQUE:
   * Cette fonction transforme Video-IA.net d'un site anglophone
   * en plateforme internationale supportant 7 langues avec contenu
   * professionnel g√©n√©r√© automatiquement.
   *
   * üèóÔ∏è ARCHITECTURE 2 PHASES:
   *
   * PHASE 1 - CONTENU ANGLAIS (Foundation)
   * ‚îú‚îÄ HTTP Status Check (√©tape 1)
   * ‚îú‚îÄ Screenshot Capture (√©tape 1.5)
   * ‚îú‚îÄ Website Crawling (√©tape 2)
   * ‚îú‚îÄ Social Links Extraction + Validation (√©tape 3)
   * ‚îú‚îÄ Useful Links Extraction + Validation (√©tape 4)
   * ‚îú‚îÄ Main Content Generation (√©tape 5)
   * ‚îú‚îÄ Overview Generation (√©tape 6)
   * ‚îú‚îÄ Key Features Generation (√©tape 7)
   * ‚îú‚îÄ Meta Data Generation (√©tape 8)
   * ‚îú‚îÄ Pricing Model Detection (√©tape 9)
   * ‚îú‚îÄ Use Cases Generation (√©tape 10)
   * ‚îî‚îÄ Target Audience Generation (√©tape 11)
   *
   * PHASE 2 - TRADUCTIONS MULTILANGUES (Expansion)
   * ‚îú‚îÄ Fran√ßais (fr) - 7 champs traduits
   * ‚îú‚îÄ Italien (it) - 7 champs traduits
   * ‚îú‚îÄ Espagnol (es) - 7 champs traduits
   * ‚îú‚îÄ Allemand (de) - 7 champs traduits
   * ‚îú‚îÄ N√©erlandais (nl) - 7 champs traduits
   * ‚îî‚îÄ Portugais (pt) - 7 champs traduits
   *
   * üìä R√âSULTAT MATH√âMATIQUE:
   * 1 outil √ó (11 √©tapes anglais + 6 langues √ó 7 champs) =
   * 1 outil √ó (11 + 42) = 53 contenus g√©n√©r√©s !
   *
   * üéØ CAS D'USAGE PRINCIPAUX:
   * 1. Onboarding nouveaux outils ‚Üí contenu complet 7 langues
   * 2. Mise √† jour outils existants ‚Üí refresh multilingue
   * 3. Migration batch ‚Üí internationalisation massive
   * 4. Qualit√© control ‚Üí r√©g√©n√©ration cibl√©e
   *
   * üö¶ GESTION DE LA QUALIT√â:
   * - Phase 1 DOIT r√©ussir pour d√©clencher Phase 2
   * - Phase 2 continue m√™me si certaines langues √©chouent
   * - Reporting d√©taill√© par phase et par langue
   * - Mode test pour validation avant production
   *
   * ‚ö° PERFORMANCE OPTIMIS√âE:
   * - Phase 1: ~90s (11 √©tapes avec crawling)
   * - Phase 2: ~120s (6 langues √ó 7 prompts en parall√®le)
   * - Total: ~3.5 minutes pour contenu complet 7 langues
   *
   * üõ°Ô∏è R√âSILIENCE INT√âGR√âE:
   * - √âchec Phase 1 ‚Üí arr√™t propre avec rapport d√©taill√©
   * - √âchec langue Phase 2 ‚Üí autres langues continuent
   * - Gestion d'erreurs granulaire avec diagnostics
   * - Mode d√©grad√© acceptable (contenu partiel)
   *
   * üì± IMPACT UX/SEO:
   * - Pages outils disponibles dans 7 langues
   * - SEO multilingue avec meta donn√©es localis√©es
   * - Grilles d'outils coh√©rentes toutes langues
   * - Exp√©rience utilisateur native par march√©
   *
   * üí∞ ROI BUSINESS:
   * - 1 outil ‚Üí 7 march√©s linguistiques
   * - Contenu professionnel sans co√ªt humain
   * - Scalabilit√© internationale automatique
   * - Time-to-market r√©duit drastiquement
   *
   * üîç MONITORING & ANALYTICS:
   * - Dur√©e totale et par phase
   * - Taux de succ√®s par langue
   * - Qualit√© du contenu g√©n√©r√©
   * - Statistiques d'utilisation Gemini API
   */

  /**
   * üöÄ PROCESSUS COMPLET DE MISE √Ä JOUR AVEC TRADUCTIONS MULTILANGUES
   *
   * Point d'entr√©e pour g√©n√©rer du contenu complet dans 7 langues.
   * Combine les 11 √©tapes de g√©n√©ration anglaise avec les traductions.
   *
   * üì• PARAM√àTRES:
   * @param toolId - ID de l'outil √† traiter (table tools)
   * @param testMode - true: pas de sauvegarde DB, false: sauvegarde compl√®te
   *
   * üì§ RETOUR:
   * Objet complet avec:
   * - phase1_english: R√©sultat 11 √©tapes anglaises
   * - phase2_translations: R√©sultats traductions 6 langues
   * - summary: Statistiques globales et qualit√©
   * - status: 'success', 'failed_english', 'failed_no_content', 'error'
   */
  static async updateToolContentWithTranslations(
    toolId: number,
    testMode: boolean = true
  ): Promise<any> {
    console.log('üåç === MISE √Ä JOUR COMPL√àTE AVEC TRADUCTIONS MULTILANGUES ===\n');

    try {
      // PHASE 1: G√©n√©ration du contenu anglais (11 √©tapes existantes)
      console.log('üìù PHASE 1: G√©n√©ration du contenu anglais...');
      const englishResult = await this.updateToolContent(toolId, testMode);

      if (englishResult.status !== 'success') {
        console.error('‚ùå √âchec g√©n√©ration contenu anglais');
        return {
          toolId,
          phase1_english: englishResult,
          phase2_translations: null,
          status: 'failed_english',
          error: 'Failed to generate English content',
        };
      }

      console.log('‚úÖ PHASE 1 termin√©e avec succ√®s');

      // PHASE 2: G√©n√©ration des traductions
      console.log('\nüåê PHASE 2: G√©n√©ration des traductions multilangues...');

      const contentToTranslate = {
        overview: englishResult.generatedOverview || '',
        description: englishResult.generatedContent || '',
        metaTitle: englishResult.generatedMetaTitle || '',
        metaDescription: englishResult.generatedMetaDescription || '',
        keyFeatures: englishResult.generatedKeyFeatures || '',
        useCases: englishResult.generatedUseCases || '',
        targetAudience: englishResult.generatedTargetAudience || '',
      };

      // V√©rifier qu'on a du contenu √† traduire
      const hasContent = Object.values(contentToTranslate).some(
        content => content && content.length > 0
      );
      if (!hasContent) {
        console.error('‚ùå Pas de contenu anglais √† traduire');
        return {
          toolId,
          phase1_english: englishResult,
          phase2_translations: null,
          status: 'failed_no_content',
          error: 'No English content to translate',
        };
      }

      const translationsResult = await this.generateToolTranslations(
        toolId,
        contentToTranslate,
        testMode
      );

      console.log('‚úÖ PHASE 2 termin√©e avec succ√®s');

      // R√âSULTAT FINAL
      const finalResult = {
        toolId,
        toolName: englishResult.toolName,
        phase1_english: englishResult,
        phase2_translations: translationsResult,
        status: 'success',
        totalSteps: 11,
        totalLanguages: translationsResult.totalLanguages + 1, // +1 pour l'anglais
        summary: {
          englishContentGenerated: englishResult.status === 'success',
          screenshotCaptured: !!englishResult.screenshotPath,
          pagesProcessed: englishResult.processedPages || 0,
          socialLinksFound: englishResult.socialLinks
            ? Object.keys(englishResult.socialLinks).length
            : 0,
          usefulLinksFound: englishResult.usefulLinks
            ? Object.keys(englishResult.usefulLinks).length
            : 0,
          translationsGenerated: translationsResult.successfulTranslations,
          totalLanguagesSupported: translationsResult.totalLanguages + 1,
        },
      };

      console.log('\nüéâ === MISE √Ä JOUR MULTILANGUE TERMIN√âE ===');
      console.log(`üéØ Outil: ${englishResult.toolName}`);
      console.log(`‚úÖ Contenu anglais: ${englishResult.status}`);
      console.log(
        `üåê Traductions r√©ussies: ${translationsResult.successfulTranslations}/${translationsResult.totalLanguages}`
      );
      console.log(
        `üì± Langues totales support√©es: ${finalResult.summary.totalLanguagesSupported}`
      );

      return finalResult;
    } catch (error: any) {
      console.error('‚ùå Erreur mise √† jour multilangue:', error.message);
      return {
        toolId,
        phase1_english: null,
        phase2_translations: null,
        status: 'error',
        error: error.message,
      };
    }
  }

  /**
   * Traiter plusieurs outils avec traductions en batch
   */
  static async updateMultipleToolsWithTranslations(
    toolIds: number[],
    testMode: boolean = true
  ): Promise<any[]> {
    const results: any[] = [];

    for (const toolId of toolIds) {
      console.log(`\nüåç Traitement multilangue de l'outil ${toolId}...`);
      const result = await this.updateToolContentWithTranslations(toolId, testMode);
      results.push(result);

      // Pause entre les outils pour √©viter la surcharge API
      await new Promise(resolve => setTimeout(resolve, 3000));
    }

    return results;
  }
}
