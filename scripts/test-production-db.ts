/**
 * ================================================================
 * üöÄ TEST PRODUCTION DB - SYST√àME MULTILANGUE OPTIMIS√â
 * ================================================================
 *
 * üéØ OBJECTIF: Tester le syst√®me en mode PRODUCTION avec connexion DB r√©elle
 *
 * ‚ö†Ô∏è  ATTENTION: Ce script va MODIFIER la base de donn√©es
 * - Sauvegarde des contenus g√©n√©r√©s
 * - Sauvegarde des traductions multilangues
 * - Sauvegarde des m√©tadonn√©es et liens
 *
 * üîß MODE: Production (testMode = false)
 * üìä VALIDATION: V√©rification compl√®te de la persistance des donn√©es
 *
 * üß™ OUTIL DE TEST: Visualizee (ID: 6669)
 * URL: https://visualizee.ai/
 *
 * üìà M√âTRIQUES √Ä VALIDER:
 * - Contenus anglais: 11 champs sauvegard√©s
 * - Traductions: 6 langues √ó 7 champs = 42 traductions
 * - Liens sociaux et utiles
 * - Screenshot et m√©tadonn√©es
 *
 * üíæ V√âRIFICATIONS DB:
 * - Tool table: Contenu anglais mis √† jour
 * - ToolTranslation table: 6 langues ajout√©es
 * - ToolSocialLink table: Liens sociaux sauvegard√©s
 * - ToolUsefulLink table: Liens utiles sauvegard√©s
 */

import { ToolContentUpdaterServiceOptimized } from '../src/lib/services/toolContentUpdaterOptimized';
import { prisma } from '../src/lib/database/client';
import * as fs from 'fs/promises';

/**
 * üöÄ FONCTION PRINCIPALE DE TEST PRODUCTION
 *
 * Ex√©cute le test complet en mode production avec sauvegarde DB.
 * Valide que toutes les donn√©es sont correctement persist√©es.
 */
async function testProductionDatabase() {
  console.log('üöÄ === TEST PRODUCTION DB - SYST√àME MULTILANGUE OPTIMIS√â ===\n');

  const toolId = 6669; // Visualizee - Outil de test de r√©f√©rence

  try {
    /**
     * üéØ INITIALISATION DU TEST PRODUCTION
     */
    console.log(`üöÄ Test PRODUCTION de Visualizee (ID: ${toolId})`);
    console.log(`üìç URL: https://visualizee.ai/`);
    console.log(
      `üåê Langues cibles: Fran√ßais, Italien, Espagnol, Allemand, N√©erlandais, Portugais`
    );
    console.log(`üîß MODE: Production (testMode = false)`);
    console.log(`üíæ DB: Sauvegarde compl√®te activ√©e`);
    console.log(`‚ö†Ô∏è  ATTENTION: Base de donn√©es sera modifi√©e`);
    console.log(`\n${'='.repeat(100)}\n`);

    const startTime = Date.now();
    console.log(`üöÄ D√âMARRAGE TEST PRODUCTION √† ${new Date().toLocaleTimeString()}`);

    // V√©rifier l'√©tat initial de l'outil
    console.log(`üîç V√©rification √©tat initial de l'outil ${toolId}...`);
    const initialTool = await prisma.tool.findUnique({
      where: { id: toolId },
      include: {
        translations: true,
        // ‚úÖ Acc√®s direct aux champs de la table Tool (pas de relations s√©par√©es)
      },
    });

    if (!initialTool) {
      throw new Error(`Outil ${toolId} non trouv√© en base de donn√©es`);
    }

    console.log(`‚úÖ Outil initial trouv√©: ${initialTool.toolName}`);
    console.log(`üìä Traductions existantes: ${initialTool.translations.length}`);

    // ‚úÖ V√©rification des liens sociaux stock√©s directement dans la table Tool
    const initialSocialLinks = [
      initialTool.socialLinkedin && 'LinkedIn',
      initialTool.socialFacebook && 'Facebook',
      initialTool.socialX && 'X/Twitter',
      initialTool.socialGithub && 'GitHub',
      initialTool.socialDiscord && 'Discord',
      initialTool.socialInstagram && 'Instagram',
      initialTool.socialTiktok && 'TikTok',
    ].filter(Boolean);

    const initialUsefulLinks = [
      initialTool.docsLink && 'Documentation',
      initialTool.affiliateLink && 'Affiliate',
      initialTool.changelogLink && 'Changelog',
      initialTool.mailAddress && 'Mail',
    ].filter(Boolean);

    console.log(
      `üîó Liens sociaux existants: ${initialSocialLinks.length} (${initialSocialLinks.join(', ')})`
    );
    console.log(
      `üîó Liens utiles existants: ${initialUsefulLinks.length} (${initialUsefulLinks.join(', ')})`
    );

    /**
     * üåç APPEL FONCTION MA√éTRE MULTILANGUE EN MODE PRODUCTION
     *
     * testMode = false ‚Üí Sauvegarde DB activ√©e
     */
    console.log(
      `\nüåç === MISE √Ä JOUR COMPL√àTE AVEC TRADUCTIONS MULTILANGUES (MODE PRODUCTION) ===`
    );

    const result =
      await ToolContentUpdaterServiceOptimized.updateToolContentWithTranslations(
        toolId,
        false
      );

    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;

    console.log(`\n‚è±Ô∏è  DUR√âE TOTALE: ${duration.toFixed(2)} secondes`);

    /**
     * üìä V√âRIFICATION POST-TRAITEMENT EN BASE DE DONN√âES
     */
    console.log(`\nüîç === V√âRIFICATION POST-TRAITEMENT EN BASE DE DONN√âES ===`);

    const finalTool = await prisma.tool.findUnique({
      where: { id: toolId },
      include: {
        translations: true,
        // ‚úÖ Acc√®s direct aux champs de la table Tool (pas de relations s√©par√©es)
      },
    });

    if (!finalTool) {
      throw new Error(`Outil ${toolId} non trouv√© apr√®s traitement`);
    }

    console.log(`\nüìä COMPARAISON AVANT/APR√àS:`);
    console.log(`   üéØ Nom: ${finalTool.toolName}`);
    console.log(
      `   üìù Description: ${finalTool.toolDescription ? '‚úÖ Mise √† jour' : '‚ùå Non mise √† jour'}`
    );
    console.log(
      `   üìñ Overview: ${finalTool.overview ? '‚úÖ Mise √† jour' : '‚ùå Non mise √† jour'}`
    );
    console.log(
      `   üîë Key Features: ${finalTool.keyFeatures ? '‚úÖ Mise √† jour' : '‚ùå Non mise √† jour'}`
    );
    console.log(
      `   üéØ Use Cases: ${finalTool.useCases ? '‚úÖ Mise √† jour' : '‚ùå Non mise √† jour'}`
    );
    console.log(
      `   üë• Target Audience: ${finalTool.targetAudience ? '‚úÖ Mise √† jour' : '‚ùå Non mise √† jour'}`
    );
    console.log(
      `   üí∞ Pricing Model: ${finalTool.pricingModel ? '‚úÖ Mise √† jour' : '‚ùå Non mise √† jour'}`
    );
    console.log(
      `   üñºÔ∏è  Image URL: ${finalTool.imageUrl ? '‚úÖ Mise √† jour' : '‚ùå Non mise √† jour'}`
    );

    console.log(`\nüåç TRADUCTIONS MULTILANGUES:`);
    const translationsByLang = finalTool.translations.reduce(
      (acc, t) => {
        acc[t.languageCode] = acc[t.languageCode] || [];
        acc[t.languageCode].push(t);
        return acc;
      },
      {} as Record<string, any[]>
    );

    Object.entries(translationsByLang).forEach(([lang, trans]) => {
      console.log(`   ${lang.toUpperCase()}: ${trans.length} champs traduits`);
      trans.forEach(t => {
        console.log(`     - ${t.name}: ${t.overview || t.description ? '‚úÖ' : '‚ùå'}`);
      });
    });

    console.log(`\nüîó LIENS SOCIAUX (stock√©s directement dans la table Tool):`);
    if (finalTool.socialLinkedin)
      console.log(`   LinkedIn: ${finalTool.socialLinkedin} ‚úÖ`);
    if (finalTool.socialFacebook)
      console.log(`   Facebook: ${finalTool.socialFacebook} ‚úÖ`);
    if (finalTool.socialX) console.log(`   X/Twitter: ${finalTool.socialX} ‚úÖ`);
    if (finalTool.socialGithub) console.log(`   GitHub: ${finalTool.socialGithub} ‚úÖ`);
    if (finalTool.socialDiscord)
      console.log(`   Discord: ${finalTool.socialDiscord} ‚úÖ`);
    if (finalTool.socialInstagram)
      console.log(`   Instagram: ${finalTool.socialInstagram} ‚úÖ`);
    if (finalTool.socialTiktok) console.log(`   TikTok: ${finalTool.socialTiktok} ‚úÖ`);

    console.log(`\nüîó LIENS UTILES (stock√©s directement dans la table Tool):`);
    if (finalTool.docsLink) console.log(`   Documentation: ${finalTool.docsLink} ‚úÖ`);
    if (finalTool.affiliateLink)
      console.log(`   Affiliate: ${finalTool.affiliateLink} ‚úÖ`);
    if (finalTool.changelogLink)
      console.log(`   Changelog: ${finalTool.changelogLink} ‚úÖ`);
    if (finalTool.mailAddress) console.log(`   Email: ${finalTool.mailAddress} ‚úÖ`);

    /**
     * üìà RAPPORT DE VALIDATION PRODUCTION
     */
    const validationReport = {
      toolId,
      toolName: finalTool.toolName,
      testMode: false,
      timestamp: new Date().toISOString(),
      duration,
      result,
      databaseValidation: {
        toolUpdated: !!finalTool.toolDescription,
        translationsCount: finalTool.translations.length,
        socialLinksCount: [
          finalTool.socialLinkedin,
          finalTool.socialFacebook,
          finalTool.socialX,
          finalTool.socialGithub,
          finalTool.socialDiscord,
          finalTool.socialInstagram,
          finalTool.socialTiktok,
        ].filter(Boolean).length,
        usefulLinksCount: [
          finalTool.docsLink,
          finalTool.affiliateLink,
          finalTool.changelogLink,
          finalTool.mailAddress,
        ].filter(Boolean).length,
        translationsByLanguage: Object.keys(translationsByLang).length,
      },
      beforeAfter: {
        initialTranslations: initialTool.translations.length,
        finalTranslations: finalTool.translations.length,
        initialSocialLinks: [
          initialTool.socialLinkedin,
          initialTool.socialFacebook,
          initialTool.socialX,
          initialTool.socialGithub,
          initialTool.socialDiscord,
          initialTool.socialInstagram,
          initialTool.socialTiktok,
        ].filter(Boolean).length,
        finalSocialLinks: [
          finalTool.socialLinkedin,
          finalTool.socialFacebook,
          finalTool.socialX,
          finalTool.socialGithub,
          finalTool.socialDiscord,
          finalTool.socialInstagram,
          finalTool.socialTiktok,
        ].filter(Boolean).length,
        initialUsefulLinks: [
          initialTool.docsLink,
          initialTool.affiliateLink,
          initialTool.changelogLink,
          initialTool.mailAddress,
        ].filter(Boolean).length,
        finalUsefulLinks: [
          finalTool.docsLink,
          finalTool.affiliateLink,
          finalTool.changelogLink,
          finalTool.mailAddress,
        ].filter(Boolean).length,
      },
    };

    // Sauvegarder le rapport de validation
    const reportFilename = `production-db-validation-${Date.now()}.json`;
    await fs.writeFile(reportFilename, JSON.stringify(validationReport, null, 2));

    /**
     * üèÅ VERDICT FINAL - VALIDATION PRODUCTION
     */
    console.log(`\n${'='.repeat(120)}`);
    console.log('üöÄ VERDICT FINAL - TEST PRODUCTION BASE DE DONN√âES');
    console.log(`${'='.repeat(120)}`);

    const translationsSuccess = finalTool.translations.length >= 30; // Au moins 5 langues √ó 6 champs
    const contentSuccess = !!finalTool.toolDescription && !!finalTool.overview;

    // ‚úÖ Validation des liens stock√©s directement dans la table Tool
    const finalSocialLinksCount = [
      finalTool.socialLinkedin,
      finalTool.socialFacebook,
      finalTool.socialX,
      finalTool.socialGithub,
      finalTool.socialDiscord,
      finalTool.socialInstagram,
      finalTool.socialTiktok,
    ].filter(Boolean).length;

    const finalUsefulLinksCount = [
      finalTool.docsLink,
      finalTool.affiliateLink,
      finalTool.changelogLink,
      finalTool.mailAddress,
    ].filter(Boolean).length;

    const linksSuccess = finalSocialLinksCount > 0 || finalUsefulLinksCount > 0;

    console.log(`\nüìä VALIDATION PRODUCTION:`);
    console.log(`   üéØ Outil: ${finalTool.toolName} (ID: ${toolId})`);
    console.log(`   ‚è±Ô∏è  Dur√©e: ${duration.toFixed(2)}s`);
    console.log(`   üìù Contenu anglais: ${contentSuccess ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`);
    console.log(
      `   üåç Traductions: ${translationsSuccess ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'} (${finalTool.translations.length} champs)`
    );
    console.log(
      `   üîó Liens: ${linksSuccess ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'} (${finalSocialLinksCount + finalUsefulLinksCount} liens)`
    );

    const overallSuccess = translationsSuccess && contentSuccess && linksSuccess;

    if (overallSuccess) {
      console.log(
        `\nüéâ === TEST PRODUCTION R√âUSSI - SYST√àME PR√äT POUR LA PRODUCTION ===`
      );
      console.log('üèÜ Toutes les validations sont pass√©es avec succ√®s');
      console.log('üíæ Base de donn√©es correctement mise √† jour');
      console.log('üåç Traductions multilangues persist√©es');
      console.log('üöÄ Syst√®me recommand√© pour la production');
    } else {
      console.log(`\n‚ö†Ô∏è === TEST PRODUCTION PARTIEL - V√âRIFICATIONS REQUISES ===`);
      console.log('üîß Certaines validations ont √©chou√©');
      console.log('üìã Analyser le rapport d√©taill√©');
      console.log('üí° V√©rifier la configuration de la base de donn√©es');
    }

    console.log(`\nüíæ RAPPORT DE VALIDATION: ${reportFilename}`);
    console.log(`üìä Traductions cr√©√©es: ${finalTool.translations.length}`);
    console.log(`üîó Liens sociaux sauvegard√©s: ${finalSocialLinksCount}`);
    console.log(`üîó Liens utiles sauvegard√©s: ${finalUsefulLinksCount}`);
    console.log(
      `üîó Total liens sauvegard√©s: ${finalSocialLinksCount + finalUsefulLinksCount}`
    );
    console.log(`‚è∞ Test termin√© √† ${new Date().toLocaleTimeString()}`);
    console.log(`${'='.repeat(120)}`);
  } catch (error: any) {
    console.error('\n‚ùå ERREUR DURANT LE TEST PRODUCTION:', error.message);
    console.log('\nüîç DIAGNOSTIC:');
    console.log(`   Type: ${error.constructor.name}`);
    console.log(`   Message: ${error.message}`);
    if (error.stack) console.log(`   Stack: ${error.stack.substring(0, 500)}...`);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cution du test production
testProductionDatabase().catch(console.error);
