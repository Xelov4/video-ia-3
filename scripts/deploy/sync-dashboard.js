#!/usr/bin/env node

/**
 * üìä Database Sync Dashboard
 * 
 * Interface interactive pour g√©rer les synchronisations de base de donn√©es
 * 
 * Usage:
 *   npm run sync:dashboard
 *   node scripts/deploy/sync-dashboard.js
 */

import { DatabaseSyncer } from './sync-to-prod.js';
import { ProdToDevSyncer } from './sync-from-prod.js';
import { DatabaseAnalyzer } from './database-analyzer.js';
import readline from 'readline';
import fs from 'fs/promises';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

class SyncDashboard {
  constructor() {
    this.syncHistory = [];
  }

  async question(prompt) {
    return new Promise((resolve) => {
      rl.question(prompt, resolve);
    });
  }

  displayHeader() {
    console.clear();
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë              üìä VIDEO-IA.NET SYNC DASHBOARD               ‚ïë');
    console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
    console.log('‚ïë  Gestion intelligente de la synchronisation des donn√©es   ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    console.log();
  }

  displayMainMenu() {
    console.log('üéØ OPTIONS DISPONIBLES:');
    console.log();
    console.log('1Ô∏è‚É£  üìä Analyser les bases de donn√©es');
    console.log('2Ô∏è‚É£  üîÑ Synchroniser DEV ‚Üí PROD');
    console.log('3Ô∏è‚É£  üì• Synchroniser PROD ‚Üí DEV');
    console.log('4Ô∏è‚É£  üìà Afficher l\'historique des syncs');
    console.log('5Ô∏è‚É£  üîç Mode diagnostic avanc√©');
    console.log('6Ô∏è‚É£  ‚öôÔ∏è  Configuration des param√®tres');
    console.log('7Ô∏è‚É£  üìö Aide et documentation');
    console.log('8Ô∏è‚É£  üö™ Quitter');
    console.log();
  }

  async analyzeOption() {
    console.log('üîç ANALYSE DES BASES DE DONN√âES');
    console.log('==============================');
    
    const options = await this.getAnalysisOptions();
    const analyzer = new DatabaseAnalyzer(options);
    
    try {
      const result = await analyzer.run();
      
      console.log('\nüìä Analyse termin√©e!');
      
      // Proposer des actions bas√©es sur l'analyse
      if (result.recommendations.length > 0) {
        console.log('\nüéØ Actions recommand√©es:');
        result.recommendations.forEach((rec, index) => {
          console.log(`${index + 1}. ${rec}`);
        });
        
        const action = await this.question('\nVoulez-vous ex√©cuter une synchronisation recommand√©e? (y/N): ');
        if (action.toLowerCase() === 'y') {
          await this.executeSyncFromRecommendation(result.recommendations);
        }
      }
      
    } catch (error) {
      console.log(`‚ùå Erreur lors de l'analyse: ${error.message}`);
    }
    
    await this.question('\nAppuyez sur Entr√©e pour continuer...');
  }

  async getAnalysisOptions() {
    const compareAll = await this.question('Analyse compl√®te de toutes les tables? (y/N): ');
    const verbose = await this.question('Mode verbeux? (y/N): ');
    const saveReport = await this.question('Sauvegarder le rapport? (y/N): ');
    
    const options = {
      compareAll: compareAll.toLowerCase() === 'y',
      verbose: verbose.toLowerCase() === 'y',
      outputFile: saveReport.toLowerCase() === 'y' ? `sync-report-${Date.now()}.json` : null
    };
    
    return options;
  }

  async syncToProdOption() {
    console.log('üîÑ SYNCHRONISATION DEV ‚Üí PROD');
    console.log('=============================');
    
    const options = await this.getSyncToProdOptions();
    const syncer = new DatabaseSyncer(options);
    
    try {
      console.log('\nüöÄ D√©marrage de la synchronisation...');
      const result = await syncer.run();
      
      if (result.success) {
        console.log('‚úÖ Synchronisation r√©ussie!');
        this.addToHistory('DEV ‚Üí PROD', result);
      } else {
        console.log('‚ùå Synchronisation √©chou√©e:', result.error);
      }
      
    } catch (error) {
      console.log(`üí• Erreur: ${error.message}`);
    }
    
    await this.question('\nAppuyez sur Entr√©e pour continuer...');
  }

  async getSyncToProdOptions() {
    console.log('\n‚öôÔ∏è Configuration de la synchronisation:');
    
    const dryRun = await this.question('Mode test (dry run)? (Y/n): ');
    
    console.log('\nModes disponibles:');
    console.log('1. full - Synchronisation compl√®te');
    console.log('2. tools - Outils uniquement');
    console.log('3. categories - Cat√©gories uniquement');
    console.log('4. translations - Traductions uniquement');
    console.log('5. selective - S√©lection personnalis√©e');
    
    const modeChoice = await this.question('Choisissez le mode (1-5): ');
    const modes = ['', 'full', 'tools', 'categories', 'translations', 'selective'];
    const mode = modes[parseInt(modeChoice)] || 'full';
    
    let tables = [];
    if (mode === 'selective') {
      const tablesInput = await this.question('Tables √† synchroniser (s√©par√©es par des virgules): ');
      tables = tablesInput.split(',').map(t => t.trim());
    }
    
    const backup = await this.question('Cr√©er un backup avant sync? (Y/n): ');
    const preserveAnalytics = await this.question('Pr√©server les analytics PROD? (Y/n): ');
    
    return {
      dryRun: dryRun.toLowerCase() !== 'n',
      mode,
      tables: tables.length > 0 ? tables : undefined,
      backup: backup.toLowerCase() !== 'n',
      preserveAnalytics: preserveAnalytics.toLowerCase() !== 'n',
      quiet: false
    };
  }

  async syncFromProdOption() {
    console.log('üì• SYNCHRONISATION PROD ‚Üí DEV');
    console.log('=============================');
    
    const options = await this.getSyncFromProdOptions();
    const syncer = new ProdToDevSyncer(options);
    
    try {
      console.log('\nüöÄ D√©marrage de la synchronisation...');
      const result = await syncer.run();
      
      if (result.success) {
        console.log('‚úÖ Synchronisation r√©ussie!');
        this.addToHistory('PROD ‚Üí DEV', result);
      } else {
        console.log('‚ùå Synchronisation √©chou√©e:', result.error);
      }
      
    } catch (error) {
      console.log(`üí• Erreur: ${error.message}`);
    }
    
    await this.question('\nAppuyez sur Entr√©e pour continuer...');
  }

  async getSyncFromProdOptions() {
    console.log('\n‚öôÔ∏è Configuration de la synchronisation:');
    
    const dryRun = await this.question('Mode test (dry run)? (Y/n): ');
    
    console.log('\nModes disponibles:');
    console.log('1. content_only - Contenu sans analytics (recommand√©)');
    console.log('2. full - Synchronisation compl√®te');
    console.log('3. analytics_only - Analytics uniquement');
    console.log('4. tools_only - Outils uniquement');
    console.log('5. selective - S√©lection personnalis√©e');
    
    const modeChoice = await this.question('Choisissez le mode (1-5): ');
    const modes = ['', 'content_only', 'full', 'analytics_only', 'tools_only', 'selective'];
    const mode = modes[parseInt(modeChoice)] || 'content_only';
    
    let tables = [];
    if (mode === 'selective') {
      const tablesInput = await this.question('Tables √† synchroniser (s√©par√©es par des virgules): ');
      tables = tablesInput.split(',').map(t => t.trim());
    }
    
    const backup = await this.question('Cr√©er un backup avant sync? (Y/n): ');
    const preserveDevData = await this.question('Pr√©server les donn√©es DEV sp√©cifiques? (Y/n): ');
    
    return {
      dryRun: dryRun.toLowerCase() !== 'n',
      mode,
      tables: tables.length > 0 ? tables : undefined,
      backup: backup.toLowerCase() !== 'n',
      preserveDevData: preserveDevData.toLowerCase() !== 'n',
      quiet: false
    };
  }

  displayHistory() {
    console.log('üìà HISTORIQUE DES SYNCHRONISATIONS');
    console.log('=================================');
    
    if (this.syncHistory.length === 0) {
      console.log('Aucune synchronisation dans l\'historique de cette session.');
      return;
    }
    
    this.syncHistory.forEach((entry, index) => {
      console.log(`\n${index + 1}. ${entry.direction} - ${entry.timestamp}`);
      console.log(`   Status: ${entry.result.success ? '‚úÖ Succ√®s' : '‚ùå √âchec'}`);
      if (entry.result.stats) {
        console.log(`   Dur√©e: ${entry.result.duration}s`);
        console.log(`   Tables trait√©es: ${entry.result.stats.tablesProcessed}`);
        console.log(`   Enregistrements: ${entry.result.stats.rowsInserted} ins√©r√©s, ${entry.result.stats.rowsUpdated} mis √† jour`);
      }
    });
  }

  async diagnosticMode() {
    console.log('üîç MODE DIAGNOSTIC AVANC√â');
    console.log('=========================');
    
    console.log('1. Test de connectivit√© aux bases de donn√©es');
    console.log('2. Analyse de l\'int√©grit√© des donn√©es');
    console.log('3. V√©rification des performances');
    console.log('4. Audit de s√©curit√©');
    console.log('5. Retour au menu principal');
    
    const choice = await this.question('\nChoisissez une option (1-5): ');
    
    switch (choice) {
      case '1':
        await this.testConnectivity();
        break;
      case '2':
        await this.checkDataIntegrity();
        break;
      case '3':
        await this.checkPerformance();
        break;
      case '4':
        await this.securityAudit();
        break;
      default:
        return;
    }
    
    await this.question('\nAppuyez sur Entr√©e pour continuer...');
  }

  async testConnectivity() {
    console.log('\nüîå Test de connectivit√©...');
    
    // Tests basiques de connexion
    const { Pool } = await import('pg');
    
    const devConfig = {
      host: process.env.DEV_DB_HOST || 'localhost',
      port: process.env.DEV_DB_PORT || 5432,
      database: process.env.DEV_DB_NAME || 'video_ia_net',
      user: process.env.DEV_DB_USER || 'video_ia_user',
      password: process.env.DEV_DB_PASSWORD || 'video123',
    };
    
    const prodConfig = {
      host: process.env.PROD_DB_HOST || '46.202.129.104',
      port: process.env.PROD_DB_PORT || 5432,
      database: process.env.PROD_DB_NAME || 'video_ia_net',
      user: process.env.PROD_DB_USER || 'video_ia_user',
      password: process.env.PROD_DB_PASSWORD || 'Buzzerbeater23',
    };
    
    try {
      const devPool = new Pool(devConfig);
      await devPool.query('SELECT 1');
      console.log('‚úÖ Connexion DEV r√©ussie');
      await devPool.end();
    } catch (error) {
      console.log(`‚ùå Connexion DEV √©chou√©e: ${error.message}`);
    }
    
    try {
      const prodPool = new Pool(prodConfig);
      await prodPool.query('SELECT 1');
      console.log('‚úÖ Connexion PROD r√©ussie');
      await prodPool.end();
    } catch (error) {
      console.log(`‚ùå Connexion PROD √©chou√©e: ${error.message}`);
    }
  }

  async checkDataIntegrity() {
    console.log('\nüîç V√©rification de l\'int√©grit√©...');
    console.log('Cette fonctionnalit√© sera impl√©ment√©e dans la prochaine version.');
  }

  async checkPerformance() {
    console.log('\n‚ö° Analyse des performances...');
    console.log('Cette fonctionnalit√© sera impl√©ment√©e dans la prochaine version.');
  }

  async securityAudit() {
    console.log('\nüîí Audit de s√©curit√©...');
    console.log('Cette fonctionnalit√© sera impl√©ment√©e dans la prochaine version.');
  }

  async showHelp() {
    console.log('üìö AIDE ET DOCUMENTATION');
    console.log('========================');
    console.log();
    console.log('üîÑ TYPES DE SYNCHRONISATION:');
    console.log('‚Ä¢ DEV ‚Üí PROD: D√©ploie les modifications de d√©veloppement en production');
    console.log('‚Ä¢ PROD ‚Üí DEV: R√©cup√®re les donn√©es de production vers le d√©veloppement');
    console.log();
    console.log('üéØ MODES DE SYNCHRONISATION:');
    console.log('‚Ä¢ full: Synchronise tout (attention aux analytics!)');
    console.log('‚Ä¢ tools: Outils uniquement');
    console.log('‚Ä¢ categories: Cat√©gories uniquement');
    console.log('‚Ä¢ content_only: Contenu sans les donn√©es d\'analytics');
    console.log('‚Ä¢ analytics_only: Donn√©es d\'analytics uniquement');
    console.log();
    console.log('‚ö†Ô∏è  BONNES PRATIQUES:');
    console.log('‚Ä¢ Toujours faire un dry run en premier');
    console.log('‚Ä¢ Cr√©er des backups avant les syncs importantes');
    console.log('‚Ä¢ Utiliser content_only pour PROD ‚Üí DEV');
    console.log('‚Ä¢ Analyser avant de synchroniser');
    console.log();
    console.log('üÜò EN CAS DE PROBL√àME:');
    console.log('‚Ä¢ Les backups sont dans ./backups/');
    console.log('‚Ä¢ V√©rifiez les logs PM2: pm2 logs');
    console.log('‚Ä¢ Contactez l\'√©quipe de d√©veloppement');
    
    await this.question('\nAppuyez sur Entr√©e pour continuer...');
  }

  addToHistory(direction, result) {
    this.syncHistory.push({
      direction,
      timestamp: new Date().toISOString(),
      result
    });
    
    // Garder seulement les 10 derniers
    if (this.syncHistory.length > 10) {
      this.syncHistory.shift();
    }
  }

  async executeSyncFromRecommendation(recommendations) {
    // Logic pour ex√©cuter automatiquement les syncs recommand√©es
    console.log('ü§ñ Ex√©cution automatique des recommandations...');
    console.log('Cette fonctionnalit√© sera impl√©ment√©e dans la prochaine version.');
  }

  async run() {
    try {
      while (true) {
        this.displayHeader();
        this.displayMainMenu();
        
        const choice = await this.question('Choisissez une option (1-8): ');
        
        switch (choice) {
          case '1':
            await this.analyzeOption();
            break;
          case '2':
            await this.syncToProdOption();
            break;
          case '3':
            await this.syncFromProdOption();
            break;
          case '4':
            this.displayHistory();
            await this.question('\nAppuyez sur Entr√©e pour continuer...');
            break;
          case '5':
            await this.diagnosticMode();
            break;
          case '6':
            console.log('‚öôÔ∏è Configuration - √Ä impl√©menter');
            await this.question('\nAppuyez sur Entr√©e pour continuer...');
            break;
          case '7':
            await this.showHelp();
            break;
          case '8':
            console.log('üëã Au revoir!');
            return;
          default:
            console.log('‚ùå Option invalide');
            await this.question('\nAppuyez sur Entr√©e pour continuer...');
        }
      }
    } finally {
      rl.close();
    }
  }
}

// CLI execution
async function main() {
  const dashboard = new SyncDashboard();
  await dashboard.run();
}

// Run if called directly
if (process.argv[1].endsWith('sync-dashboard.js')) {
  main().catch(console.error);
}

export { SyncDashboard };