#!/usr/bin/env python3
"""
Script d'exportation de la base de donn√©es video-ia.net
Exporte toutes les donn√©es en JSON et SQL pour utilisation dans d'autres projets
"""

import json
import os
import sys
from datetime import datetime
from pathlib import Path
import psycopg2
from psycopg2.extras import RealDictCursor
import argparse

# Configuration de la base de donn√©es
DB_CONFIG = {
    'host': 'localhost',
    'port': 51214,  # Port PostgreSQL standard
    'database': 'template1',  # Base de donn√©es par d√©faut
    'user': 'postgres',
    'password': None  # √Ä configurer selon votre setup
}

def get_db_connection():
    """√âtablit une connexion √† la base de donn√©es PostgreSQL"""
    try:
        # Essayer de se connecter avec les param√®tres par d√©faut
        conn = psycopg2.connect(
            host=DB_CONFIG['host'],
            port=DB_CONFIG['port'],
            database=DB_CONFIG['database'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG.get('password')
        )
        print("‚úÖ Connexion √† la base de donn√©es √©tablie")
        return conn
    except psycopg2.OperationalError as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        print("üí° V√©rifiez que PostgreSQL est en cours d'ex√©cution et que les param√®tres de connexion sont corrects")
        return None

def get_all_tables(conn):
    """R√©cup√®re la liste de toutes les tables de la base de donn√©es"""
    with conn.cursor() as cursor:
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """)
        return [row[0] for row in cursor.fetchall()]

def export_table_data(conn, table_name):
    """Exporte toutes les donn√©es d'une table sp√©cifique"""
    with conn.cursor(cursor_factory=RealDictCursor) as cursor:
        cursor.execute(f"SELECT * FROM {table_name}")
        rows = cursor.fetchall()
        return [dict(row) for row in rows]

def create_json_export(conn, export_dir):
    """Cr√©e un export JSON complet de la base de donn√©es"""
    print("üîÑ Cr√©ation de l'export JSON...")
    
    # R√©cup√©rer toutes les tables
    tables = get_all_tables(conn)
    print(f"üìä Tables trouv√©es: {', '.join(tables)}")
    
    # Structure des donn√©es d'export
    export_data = {
        'exportDate': datetime.now().isoformat(),
        'database': 'video-ia.net',
        'tables': {}
    }
    
    # Exporter chaque table
    for table in tables:
        print(f"üìä Exportation de la table: {table}")
        try:
            data = export_table_data(conn, table)
            export_data['tables'][table] = data
            print(f"   ‚úÖ {len(data)} enregistrements export√©s")
        except Exception as e:
            print(f"   ‚ùå Erreur lors de l'export de {table}: {e}")
    
    # Cr√©er le fichier JSON
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    json_path = export_dir / f"database-export-{timestamp}.json"
    
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(export_data, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"‚úÖ Export JSON cr√©√©: {json_path}")
    return json_path

def create_sql_export(conn, export_dir):
    """Cr√©e un export SQL avec les instructions INSERT"""
    print("üîÑ Cr√©ation de l'export SQL...")
    
    tables = get_all_tables(conn)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    sql_path = export_dir / f"database-export-{timestamp}.sql"
    
    with open(sql_path, 'w', encoding='utf-8') as f:
        f.write(f"-- Export de la base de donn√©es video-ia.net\n")
        f.write(f"-- Date: {datetime.now().isoformat()}\n")
        f.write(f"-- G√©n√©r√© automatiquement\n\n")
        
        # R√©initialisation des tables
        f.write("-- R√©initialisation des tables\n")
        for table in reversed(tables):  # Ordre inverse pour √©viter les contraintes de cl√©s √©trang√®res
            f.write(f"TRUNCATE TABLE {table} CASCADE;\n")
        f.write("\n")
        
        # Export des donn√©es de chaque table
        for table in tables:
            print(f"üìä G√©n√©ration SQL pour: {table}")
            try:
                data = export_table_data(conn, table)
                if data:
                    f.write(f"-- Insertion des donn√©es de {table}\n")
                    
                    # R√©cup√©rer les noms des colonnes
                    with conn.cursor() as cursor:
                        cursor.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name = '{table}' ORDER BY ordinal_position")
                        columns = [row[0] for row in cursor.fetchall()]
                    
                    # G√©n√©rer les INSERT statements
                    for row in data:
                        values = []
                        for col in columns:
                            value = row.get(col)
                            if value is None:
                                values.append('NULL')
                            elif isinstance(value, (int, float)):
                                values.append(str(value))
                            elif isinstance(value, bool):
                                values.append('TRUE' if value else 'FALSE')
                            else:
                                # √âchapper les apostrophes dans les cha√Ænes
                                escaped_value = str(value).replace("'", "''")
                                values.append(f"'{escaped_value}'")
                        
                        f.write(f"INSERT INTO {table} ({', '.join(columns)}) VALUES ({', '.join(values)});\n")
                    
                    f.write("\n")
                    print(f"   ‚úÖ {len(data)} INSERT statements g√©n√©r√©s")
                
            except Exception as e:
                print(f"   ‚ùå Erreur lors de la g√©n√©ration SQL pour {table}: {e}")
        
        # R√©initialisation des s√©quences
        f.write("-- R√©initialisation des s√©quences\n")
        for table in tables:
            f.write(f"SELECT setval('{table}_id_seq', (SELECT MAX(id) FROM {table}));\n")
    
    print(f"‚úÖ Export SQL cr√©√©: {sql_path}")
    return sql_path

def create_csv_exports(conn, export_dir):
    """Cr√©e des exports CSV pour chaque table"""
    print("üîÑ Cr√©ation des exports CSV...")
    
    import csv
    tables = get_all_tables(conn)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    csv_dir = export_dir / f"csv-export-{timestamp}"
    csv_dir.mkdir(exist_ok=True)
    
    for table in tables:
        print(f"üìä Export CSV pour: {table}")
        try:
            data = export_table_data(conn, table)
            if data:
                csv_path = csv_dir / f"{table}.csv"
                
                with open(csv_path, 'w', newline='', encoding='utf-8') as f:
                    if data:
                        writer = csv.DictWriter(f, fieldnames=data[0].keys())
                        writer.writeheader()
                        writer.writerows(data)
                
                print(f"   ‚úÖ {len(data)} lignes export√©es vers {csv_path}")
        
        except Exception as e:
            print(f"   ‚ùå Erreur lors de l'export CSV pour {table}: {e}")
    
    print(f"‚úÖ Exports CSV cr√©√©s dans: {csv_dir}")
    return csv_dir

def main():
    """Fonction principale d'exportation"""
    parser = argparse.ArgumentParser(description='Export de la base de donn√©es video-ia.net')
    parser.add_argument('--format', choices=['json', 'sql', 'csv', 'all'], default='all',
                       help='Format d\'export (json, sql, csv, all)')
    parser.add_argument('--output-dir', default='../data-exports',
                       help='R√©pertoire de sortie pour les exports')
    
    args = parser.parse_args()
    
    # Cr√©er le r√©pertoire d'export
    export_dir = Path(args.output_dir)
    export_dir.mkdir(exist_ok=True)
    
    print("üîÑ D√©but de l'exportation de la base de donn√©es...")
    
    # Connexion √† la base de donn√©es
    conn = get_db_connection()
    if not conn:
        sys.exit(1)
    
    try:
        # Ex√©cuter les exports selon le format demand√©
        if args.format in ['json', 'all']:
            create_json_export(conn, export_dir)
        
        if args.format in ['sql', 'all']:
            create_sql_export(conn, export_dir)
        
        if args.format in ['csv', 'all']:
            create_csv_exports(conn, export_dir)
        
        print("‚úÖ Exportation termin√©e avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'exportation: {e}")
        sys.exit(1)
    
    finally:
        conn.close()
        print("üîå Connexion √† la base de donn√©es ferm√©e")

if __name__ == "__main__":
    main() 